@1 25 Рекурсія
@@ рекурс+

@3 Рекурсія - це зведення задачі до такої ж задачі, але меншого розміру.

@3 Деякі алгоритми мають суто рекурсивний характер.
Наприклад, відомо, що НСД(a, b) такий же самий, як НСД(b, a % b).
{{
// майже правильна програма
function gcd(a, b) {
    return gcd (b, a % b);
}
}}

@2 Рекурсивні визначення
@@ -

@3 Рекурсивні алгоритми виходять з рекурсивних визначень.
У таких визначеннях, крім рекурсивної частини, є і не рекурсивна - база рекурсії.

@3 Правильне визначення НОД:
{{
НСД (а, 0) = a
НСД (а, b) = НСД (b, a% b)
}}


@3 Приклад. Рекурсивний факторіал.
Це - визначення.
{{
0! = 1
n! = N * (n-1)!
}}

@3 Це - алгоритм.
{{
function factorial (n)
{
   if (n == 0)
       return 1;
   return n * factorial (n - 1);
}
}}
[[http://www.pythontutor.com/javascript.html#mode=edit]]

@2 Рекурсивний ряд Фібоначчі
@@ -

@3 Визначення n-го члена ряду Фібоначчі.
{{
f (1) = 1
f (2) = 1
f (n) = f (n-1) + f (n-2)
}}

@3 Алгоритм обчислення n-го члена ряду Фібоначчі.
{{
function fib(n) {
   if (n <= 2)
       return 1;
   return fib(n - 1) + fib(n - 2);
}
}}

@3 Цей алгоритм працює повільно.
{{
let t = new Date().getTime();
fib(42);
t = new Date().getTime() - t;
console.log(t / 1000);
}}

@3 [[fib-tree.png]]

@3 Нехай функція f викликає g, g викликає h, а h викликає f.
Тоді всі три функції - рекурсивні.

@2 Підсумки

@3 В основі рекурсивних алгоритмів лежать рекурсивні визначення.

@3 Код рекурсивної функції краще починати з бази рекурсії.

@3 Рекурсивна функція може викликати себе не прямо, а опосередковано - через інші функції.
 
@2 Задачі

@6 Звернення Рядка | 532
@6 Квадратний Корінь | 552
