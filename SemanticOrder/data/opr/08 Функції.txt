@1 08 Функції
@@ функці+

@3 Функція - фундаментальне поняття не тільки математики, але і програмування.

@3 Функція задає однозначну відповідність між двома множинами.
[[Function.png]]

@3 В математиці відповідність можна встановити по-різному: 
виразом, 
таблицею, 
графіком 
або іншим чином.

@3 У програмуванні відповідність можна встановити тільки алгоритмом.

@2 Команда function
@@ return|function

@4 function ім'я (параметри)
    тіло_функціі

@3 Визначення функції складається із заголовка і тіла.
Заголовок - це ключове слово function, ім'я функції і список параметрів в круглих дужках.
Тіло функції - це блок.

@3 Наприклад, визначимо функцію, яка виконує цілочисельне ділення x на y.
{{
function div(x, y)
{
    let r = x % y;
    return (x - r) / y;
}
}}

@2 Команда return
@@ -

@3 Команда return припиняє виконання тіла функції і повертає управління в місце виклику функції.

@3 Якщо після слова return стоїть вираз, він обчислюється і результат стає значенням функції.

@3 Якщо вираз відсутній, значення функції - undefined, тобто
{{
return; 
// це те ж саме, що
return undefined;
}}

@3 В тілі функції може бути декілька команд return.
Якщо жодної команди return немає, інтерпретатор сам додає її в кінець тіла функції.
{{
function hello()
{
   console.log( "Hello, world!");
   // return;
}
}}

@2 Команда виклику
@@ параметр+|аргумент+

@4 ім'я (аргументи)

@3 Виконуючи виклик функції, інтерпретатор:
1) обчислить значення всіх аргументів,
2) присвоїть ці значення параметрам функції,
3) зайде в тіло функції і буде виконувати його, доки не зустріне команду return.

@3 Команда виклику завжди знаходиться в складі виразу (самотня команда виклику це теж вираз).

@3 Один раз визначивши функцію, ми можемо скористатися нею скільки завгодно раз.
{{
a = div(10, 6);
b = div(33, 4);
...
}}


@2 Приклади функцій
@@ факторіал+|gcd

@3 Функція max(x, y) повертає більше з двох чисел x і y.
{{
function max(x, y)
{
    let z;
    if (x > y)
      z = x;
    else
      z = y;
    return z;
}
}}

@3 Функція обчислення факторіала.
n! = 1 * 2 * 3 * ... * n.
{{
function factorial(n)
{
   let f = 1;
   while (n > 0) {
       f *= n;
       n -= 1;
   }
   return f;
}
}}

@3 Функція знаходження найбільшого спільного дільника.
{{
function gcd(a, b)
{
    while (b > 0)
    {
        let r = a % b;
        a = b;
        b = r;
    }
    return a;
}
}}

@2 Підсумки

@3 В програмуванні функція - це завжди обчислювальна процедура.
@3 Визначення функції можна сприймати як доповнення мови локальної командою.


@2 Задачі

@6 Середнє Арифметичне | 498
@6 Мінімальне з Трьох Чисел | 499

