@1 12 Цикл for
@@ for

@3 В JS є ще одна команда повторення, яка пристосована для роботи з масивами. 

@4 for (стартова_команда; умова_повторення; команда_ітерації)
   цільова_команда

@3 Приклад - заповнити масив числами: 0, 1, 2, 3, ..., 99.
{{
let arr = new Array(100);

for (let i = 0; i < arr.length; i += 1)
{
   arr[i] = i;
}
}}

@3 Зміст команди for.
{{
{
    стартова_команда;
    while (умова_повторення) 
    {
        цільова_команда;
        команда_ітерації;
    }
}
}}

@3 Ці два цикли роблять те ж саме.
{{
let arr = new Array(100);
// ------------------
let i = 0;
while (i < arr.length)
{
  arr[i] = i;
  i += 1;
}
// -------------------
for (let i = 0; i < arr.length; i += 1)
{
   arr[i] = i;
}
}}


@2 Проходження масиву циклом for
@@ -

@3 Порахувати елементи масиву.
{{
let count = 0;
for (let i = 0; i < arr.length; i += 1) {
  count += 1;
}
}}

@3 Роздрукувати елементи масиву.
{{
for (let i = 0; i < arr.length; i += 1) {
  console.log(arr[i]);
}
}}

@3 Команда for становить блок.
Змінні, оголошені в команді for, видно тільки в цьому блоці.
{{
for (let a = 1, b = 5; a < b; a++, b--)
    console.log (a, b);
console.log (a, b); // error
}}

@3 Всі елементи циклу for не обов'язкові.
{{
for (;;) {
   // нескінченний цикл
}
}}

@2 Дострокове завершення
@@ break
 
@3 Достроковий вихід з будь-якого циклу можливий завдяки команді break.
{{
for (;;) {
   let str = prompt();
   if (str == 'bye')
      break;
}
}}

@2 Підсумки

@3 Цикл for не додає нових можливостей, але додає зручності.
@3 Змінні, що оголошені в циклі for, не видно за межами циклу, тобто цикл for становить блок.
@3 За допомогою команди break цикл завершують достроково.

@2 Задачі

@6 Вставка у Впорядкований Масив | 534
@6 Заміна Елементів | 536

@@ @2 Питання

@@ @3 Что означает выражение  i++ ?
@@ @3 Не могу понять как это работает
@@                while (i < arr.length) arr[i] = i++;
@@ @3 А в JS есть операция  goto?
 