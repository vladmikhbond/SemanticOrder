@1 011 Мови програмування

@2 Мова асемблера
@@ асемблер+|бібліотек+|транслятор+|компілятор+|інтерпретатор+

@3 Команди: GET - прочитати, PUT - записати, ADD - додати.
Комірки пам'яті отримали імена - a, b, c.
{{
.CODE
GET a
ADD b
PUT з
.DATA
a: 25
b: 10
c: 0
}}

@3 Зазвичай одній команді мови асемблера відповідає ціла група машинних команд.

@3 Асемблер (збирач) - збирає машинну програму з груп команд і сторонніх бібліотек.

@3 Бібліотека - зібрання програм, які можна використовувати при написанні інших програм.

@2 Мова високого рівня

@3 Та ж сама програма.
{{
a = 25
b = 10
c = a + b
}}

@3 Транслятор - перекладач.
Компілятор - перекладає всю програму до початку її виконання.
Інтерпретатор - перекладає команди програми в міру їх виконання.

@2 Алгол, Фортран, Кобол
@@ алгол+|фортран+|кобол+|лисп+|Algol|Fortran|Cobol|Lisp

@3
[[Algol-fortran-cobol.png]]

@3
[[Lisp-.png]]

@2 Середовище виконання
@@ операційн+ систем+|середовищ+ виконанн+|node.js|alert

@3 Операційна система - програма, яка забезпечує виконання всіх інших програм.

@3 Але програмам, написаним мовою високого рівня, цього не достатньо.
Їм потрібен інтерпретатор або компілятор.

@3 Інтерпретатор може бути самостійною програмою або входити до складу інших програм.

@3 Почати програмувати, наприклад, на JS можна за допомогою будь-якого web-браузера.
{Лайфхак}
1. Помістити програму в текстовий файл з розширенням .html, оточивши її тегами <script> ... </ script>.
{{
<script>
   a = 25
   b = 10
   c = a + b
   alert(c)
</script>
}}
2. Завантажити файл в веб-браузер.

@3 Команда alert здатна показати свій зміст у сплиаючому вікні браузера.
 
@3 Середовище виконання, яке не є браузером - програма node.js.

@2 Підсумки

@3 Мова асемблера близька до машинної мови.
@3 Мова високого рівня близька до математичної нотації.

