@1 17 Винятки

@3 Виняткова ситуація - це проблема, яку неможливо остаточно вирішити там, де вона виникла.
Щоб відтермінувати остаточне вирішення, створюють винятки.
В JS винятки називають помилкою.

@2 Як створити помилку

@3 У винятковій ситуації програма повинна створити помилку.
{{
function factorial(n) {
   if (n < 0)
      throw new Error("n не може бути від'ємним"); 
   // Тут обчислення факторіалу
}
}}

@3 Створюють помилки за допомогою команди throw.
Команда throw схожа на команду return – вона також повертає керування.

@3 Створена помилка з'явиться в функції, що викликала factorial.
{{
function main()
{
    let f = factorial(-1); // те саме, що thrоw ...
}
}}

@3 Загальна картина: метод А викликає метод B, а той викликає метод C.
[[errorStack.png]]

@3 У JS є багато вбудованих конструкторів для стандартних помилок: Error, SyntaxError, ReferenceError, TypeError та інші.

@2 Як зловити помилку

@3 Код, здатний створити помилку, оточують блоком try.
Відразу за блоком try слідує блок catch, що містить обробку помилки.
{{
function main()
{
   try
   {
      let f = factorial(-1);
      console.log(f);
   }
   catch (err)
   {
      console.log(err.message);
   }
}
}}

@3 Об'єкт помилки – це об'єкт, що містить інформацію про виняткову ситуацію:
  name - ім'я помилки,
  message - текстове повідомлення,
  stack - послідовність викликів методів, що призвела до виключення.
Для вбудованих конструкторів властивість name співпадає з ім'ям конструктору.

@3 Блок catch ловить усі помилки, і ті, що очікують, і ті, яких не очікують.
Для того, щоб реакція на помилку була адекватною,
треба відокремити перші від других (розрізняти по name або message),
для перших - відреагувати, для других створити помилку повторно командою
{{
throw err;
}} 

@2 Глобальна обробка помилок

@3 Така можливість надається оточенням.

@3 В node.js це обробник події процесу "uncaughtException".
{{
process.on("uncaughtException", err => {
   console.log(err.message);
});
}}

@3 А в браузері ми можемо присвоїти функцію спеціальній властивості window.onerror.
{{
window.onerror = function(message, url, line, col, error) {
  // ...
};
}}
message - повідомлення про помилку.
url - URL-адреса скрипта, в якому відбулася помилка.
line, col - номери рядка та стовпця, в яких сталася помилка.
error - об'єкт помилки.

@2 Гарантоване виконання

@3 Для гарантованого виконання деякого коду його оточують блоком finally, 
наступний за блоком catch або безпосередньо за блоком try.
{{
try {
     // ризикований код
}
finally
{
     // обов'язковий код
}
}}

@3 Приклад.
{{
TextWriter writer = null;
try
{
    writer = new StreamWriter("d:\111.txt");
    foreach (string s in ss)
        writer.WriteLine(s);
}
finally
{
    writer.Close();
}
}}

@3 Якщо ризикований код не викликав виключення, виконання переходів відкладається до закінчення обов'язкового коду.
{{
try {
     // ризикований код
     return …
     throw …
     goto …
}
catch
{
     // код обробки
}
finally
{
     // обов'язковий код
}
}}