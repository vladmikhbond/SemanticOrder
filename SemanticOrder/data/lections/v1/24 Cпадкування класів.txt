@1 24 Cпадкування класів

@2 Cпадкування класів

@3 Спадкування в ES-6 відрізняється від прототипного успадкування ES-5 тільки синтаксично.

@3 Синтаксис:
{{
class Child extends Parent {
  ...
}
}}

@3 Приклад. Клас Rabbit успадковує клас Animal.
{{
class Animal {
   constructor(name) {
      this.name = name;
   }

   walk() {
      console.log("I walk:" + this.name);
   }
}

class Rabbit extends Animal {
   walk() {
      super.walk();
      console.log(" and jump!");
   }
}

new Rabbit("Василь").walk();
// I walk: Василь
// and jump!
}}

@3 При наслідуванні формується стандартний ланцюжок прототипів:
методи Rabbit знаходяться в Rabbit.prototype, методи Animal – в Animal.prototype, і вони пов'язані через __proto__
{{
class Animal { }
class Rabbit extends Animal { }

console.log( Rabbit.prototype.__proto__ === Animal.prototype ); // true
}}

@3 У класах немає закритих або захищених властивостей. Усі вони відкриті.

@3 Метод constructor батька успадковується автоматично.

@3 Якщо у нащадку не оголошено свого конструктора, то використовується батьківський.
У прикладі вище, Rabbit використовує constructor від Animal.
Якщо ж у нащадка є власний конструктор,
то конструктор батька можна викликати з нього як super() з аргументами для батька.

@3 Наприклад, викличемо конструктор Animal з конструктора Rabbit:
{{
class Animal 
{
   constructor(name) {
      this.name = name;
   }

   walk() {
      console.log("I walk. " + this.name);
   }
}

class Rabbit extends Animal 
{
   constructor() {
      // викликати конструктор Animal з аргументом "Кролик"
      super("Кролик");    // _майже_ те саме, що Animal.call(this, "Кролик")
   }
}

new Rabbit().walk(); // I walk. Кролик
}}

@3 Викликати конструктор батька можна лише з конструктора нащадка.

@3 У конструкторі нащадка ми повинні викликати super() перед зверненням до this.
До виклику super() немає this, т.к. за специфікацією саме виклик super() ініціалізує this.

@3 З методу нащадка можна викликати метод предка через слово super.
{{
class Rabbit extends Animal 
{
   constructor() {
      super("Кролик");   
   }
 
   walk() {
      console.log(this.name + " says:");
      super.walk();
   }
}

new Rabbit().walk();     // Кролик says: \n I walk. Кролик
}}

@2 Слово super і [[HomeObject]]

@3 Для того, щоб слово super виконувало свої обов'язки - 
розшукувало метод предка по всьому ланцюжку наслідування аж до кореню,
потрібно, щоб кожен метод об'єкта зберігав посилання на свого хазяїна.

Таке посилання дійсно є, воно зветься [[HomeObject]] і безпосередньо не доступне.

@3 Треба знати, що метод отримає таке посилання, якщо він буде визначений саме як метод,
а не функціональна властивість, тобто в такому визначенні super не спрацює.
{{
   walk = function() {
      console.log(this.name + " says:");
      super.walk();
   }
}}

@2 Завдання

@6 Клас Figure | 792
@6 Рядок з Реверсом | 793