@1 30 События

@3 События - это полезная метафора.
Имеется объект - источник событий.
Имеются функции, которые подписаны на этот вид событий (слушатели события).
Когда происходит событие, вызываются все функции, подписанные на это событие.
[[events.png]]

@3 Источник событий имеет список ссылок на слушателей, который первоначально пуст.
Подписка состоит в  том, что в список добавляется ссылка на функцию, "отписка" - в том, что ссылка на функцию удаляется из списка.

@2 События в C#

@3 Поддержка событий в языке С# заключается в том, что есть специальный член класса - event.
Тип event'a - делегат.

@3 С event'ом можно выполнять три операции:
- подписку,
- отписку,
- вызов (только из определения класса).

@2 Пример. Коллекция с событиями

@3 Имеется коллекция, в которую можно добавлять и удалять элементы.
{{
public class MyList<T> : List<T>  {   }
}}

@3 Пусть она издает событие ChangedEvent, когда ее содержимое меняется.
{{
public class MyList<T> : List<T>
{
    public event Action ChangedEvent;

    public new void Add(T item)
    {
        base.Add(item);
        ChangedEvent?.Invoke();
    }

    public new void Remove(T item)   {... }
}
}}

@3 Поместим на форму элемент ListBox и привяжем к нему список книг.
{{
MyList<Book> _books = new MyList<Book>();

public Form1()
{
    InitializeComponent();
    _books.Add(new Book { Title = "111", Author = "222" });
    bookBindingSource.DataSource = _books;
    _books.ChangedEvent += _books_ClickEvent;
}

}}

@3 В обработчике события ChangedEvent будем обновлять привязку.
{{
private void _books_ClickEvent(Book book)
{
    Text = book.Title;
    bookBindingSource.ResetBindings(false);
}
}}

@2 Метод OnChange

@3 Обычно событие Xxx возбуждается в специальном методе OnXxx().
{{
public void OnChanged()
{
    ChangedEvent?.Invoke();
}
}}

@3 Это позволяет выбирать способ обработки события 
между наследованием и делегированием.

@2 Информация о событии

@3 Сделаем так, чтобы в обработчик попадала информация о событии - удаленная или добавленная книга.
Для этого изменим сигнатуру делегата ChangedEvent.
{{
public event Action<T> ChangedEvent;
}}

@2 События в WinForms

@3 В WinForms для событий принят ряд соглашений.
1. Имена событий заканчиваются на Event (например, MouseDownEvent) 
а имена делегатов на EventHandler  (например, MouseEventHandler) 

@3 2. Обработчик всегда получает два параметра: object sender и EventArgs e
Второй параметр наследует тип EventArgs

@3 3. События возбуждаются в виртуальных методах On...
{{
protected override void OnMouseDown(MouseEventArgs e)
{
    // base.OnMouseDown(e);
}

private void Form1_MouseDown(object sender, MouseEventArgs e)
{
}
}}

@2 Отписка

@3 Отписаться от события можно операцией -=
Обработчик - это синглетон.


@2 Задачи


@6 События Создания и Удаления  | 227
@6 Событие Простое Число  | 228
@6 Класс с Событием Bang  | 647


