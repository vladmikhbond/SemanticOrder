@1 06_ Рядки

@3 Тип {System.String} можна охарактеризувати як незмінний масив символів. 
{{
string s = "abc";
s[0] = 'd';        // ОШИБКА!   
}}

@2 Рядкові літерали

@3 Звичайний
{{ 
"Hello!\n"          
"C:\\Files" 
}}

@3 Дослівні рядки

{{
 @"C:\Files"  // "C:\\Files"
@"Рядок з ""лапками"""; //   "Рядок з \"лапками\""
 @"first
    second third";
}}

@3 Интерполяція рядків
{{
int x = 5;
$"На руці {x} пальців"
}}

@2 Конструктори та селектори

@3 Конструктором рядка є функція string() 
{{
string s = new string('a', 10); 
}}

@3 Тип {string} - посилальний.
Тут копіюється посилання 
{{
string s1 = s;
}}

@3 Тут створюється новий рядок.
{{
string s2 = new string('a', 10); 
}}

@3 Селектори виглядають так само, як селектори масиву.
 
@2 Операції над рядками

@3 {{string s = "abc" + "defg";  }}

@3 {{s[s.Length – 1]                 // звернення до останнього символу рядка }}

@3 {{s.Substring(p, n)               // отримання підрядка починаючи з вказаної позиції знака p зазначеної довжини  n}}

@3 {{s.Substring(p)               // отримання підрядка починаючи з вказаної позиції знака p до кінця рядка}}

@3 {{s.IndexOf(c)                    // індекс першого входження символу або підрядка  }}

@3 {{s.LastIndexOf(c)                // індекс останнього входження символу або підрядка  }}

@3 {{s.Split(new char[] { ' ', ',' });  // розділення рядка на масив підрядків }}

@3 {{s.Insert(3, subString);    // повертає новий рядок, в якому зазначений рядок
вставляється в зазначеній позиції індексу}}

@3 {{s.Remove(ind);   // повертає новий рядок, в якому були видалені всі символи,
  починаючи з вказаної позиції і до кінця}}

@2 Введення/виведення даних у консоль

@3 {Ввод з консолі}
{{     
string s = Console.ReadLine();

// Перетворення до цілого.
short h = Convert.ToInt16(s);   // h = Int16.Parse(s);
int i = Convert.ToInt32(s);      //   i = Int32.Parse(s);
long l = Convert.ToInt64(s);    //   l = Int64.Parse(s);

// Перетворення до дійсного.
float f = Convert.ToSingle(s); //  f = Single.Parse(s);
double d = Convert.ToDouble(s);    // d = Double.Parse(s);
}}

@3 Перетворення з перевіркою
{{
if (Int32.TryParse(s,out int i1) ) 
                Console.WriteLine(i1);
}}

@3 Коли рядок може бути перетворений в запитаний тип даних, метод TryParse () повертає true і привласнює розібране значення змінної, переданої методу. У разі неможливості розбору значенню змінної присвоюється стандартне значення, а метод TryParse () повертає  false.

@3 {Виведення рядків}
{{
int x = 10, y = 20;
Console.Write("X= "+ x +"  Y= " + y);   
}}

@3 Вывод с форматированием. 
{{
Console.Write("X= {0}  Y= {1}", x, y);   

Console.Write($"X= {x}  Y= {y}");   
}}

@2 Форматування чисел

@3 Шаблон для форматування чисел може включати в себе додаткову інформацію. В цілому його структура така: 
{{
{ index [,alignment] [:formatString] }
}}
{index} – номер значення в списку значень;
{alignment} – ціле зі знаком - ширина поля і вирівнювання (якщо ширина позитивна - вирівнювання вправо, якщо негативна - вліво);
{:formatString} – формат подання.

@3 Наприклад,
{{
{0,-10:F2} 
}}означає: вирівнювання вліво, ширина не менше 10 позицій, формат з фіксованою точкою, 2 знака після коми.

@2 Змінні рядки System.Text.StringBuilder
@3 Унікальність класу StringBuilder в тому, що при виклику його членів проводиться пряма зміна внутрішніх символьних даних об'єкта без отримання копії даних в модифікованому форматі. 

@2 Задачи

@6 Слова в Рифму  | 151
@6 Сколько Вхождений  | 152
@6 Последнее Вхождение  | 153
@6 Анаграммы  | 155