@1  34 Полезные  ссылки 

@2 Принципы  SOLID

@3 При создании программных систем использование принципов SOLID способствует созданию такой системы, которую будет легко поддерживать и расширять в течение долгого времени. Принципы SOLID — это руководства, которые также могут применяться во время работы над существующим программным обеспечением для его улучшения.

@3 {Принцип единственной ответственности (single responsibility principle)}
Для каждого класса должно быть определено единственное назначение. Все ресурсы, необходимые для его осуществления, должны быть инкапсулированы в этот класс и подчинены только этой задаче.

@3 {Принцип открытости/закрытости (open–closed principle)}
Модуль или класс должен  быть закрыт для изменений и открыт для дополнений.
Иными словами, изменения программы должны происходить за счет добавления нового кода, а не изменения того, что уже есть.
Соблюсти принцип можно, добавляя новую функциональность в классы-наследники, при этом оставляя неизменными классы-предки.

@3 	{Принцип подстановки Лисков (Liskov substitution principle)}
Объекты в программе должны быть заменяемыми на экземпляры их подтипов без изменения правильности выполнения программы.
Или: Экземпляры классов в программе могут быть заменены экземплярами их наследников, и  поведение программы не изменится.

@3 {Принцип разделения интерфейса (interface segregation principle)}
Клиенты не должны зависеть от методов, которые они не используют.
Cлишком «толстые» интерфейсы необходимо разделять на более худые и специфические,  чтобы клиенты интерфейсов знали только о методах, которые необходимы именно им.

@3 {Принцип инверсии зависимостей (dependency inversion principle)}
Зависимости внутри системы строятся на основе абстракций (интерфейсов).


@3 Некоторые  ссылки:
@3 1. Принципы SOLID, о которых должен знать каждый разработчик 
[[https://medium.com/webbdev/solid-4ffc018077da]]
@3 2. Принципы SOLID в картинках [[https://habr.com/ru/company/productivity_inside/blog/505430/]]
@3 3. Принципы SOLID: объяснение человеческим языком [[https://techrocks.ru/2020/08/26/solid-principles-in-plain-russian/]]
@3 4. Принципы SOLID в C#  [[https://professorweb.ru/my/it/blog/net/solid.php]]

@2 Объектно-ориентированное  проектирование. Паттерны  проектирования.

@3 Шаблон проектирования или паттерн (англ. design pattern) в разработке программного обеспечения — повторяемая архитектурная конструкция, представляющая собой решение проблемы проектирования в рамках некоторого часто возникающего контекста.
Обычно шаблон не является законченным образцом, который может быть прямо преобразован в код; это лишь пример решения задачи, который можно использовать в различных ситуациях. Объектно-ориентированные шаблоны показывают отношения и взаимодействия между классами или объектами, без определения того, какие конечные классы или объекты приложения будут использоваться.

@3 В сравнении с полностью самостоятельным проектированием, шаблоны обладают рядом преимуществ. Основная польза от использования шаблонов состоит в снижении сложности разработки за счёт готовых абстракций для решения целого класса проблем. Шаблон даёт решению своё имя, что облегчает коммуникацию между разработчиками, позволяя ссылаться на известные шаблоны. Таким образом, за счёт шаблонов производится унификация деталей решений: модулей, элементов проекта, — снижается количество ошибок. Применение шаблонов концептуально сродни использованию готовых библиотек кода. Правильно сформулированный шаблон проектирования позволяет, отыскав удачное решение, пользоваться им снова и снова. Набор шаблонов помогает разработчику выбрать возможный, наиболее подходящий вариант проектирования.

@3 Некоторые  ссылки:
@3 1. Э. Гамма, Р. Хелм, Р. Джонсон, Дж. Влиссидес. Приемы объектно-ориентированного проектирования. Паттерны проектирования. . – С.-Пб.: Питер, 2015. – 368 с.
@3 2. Вайсфельд М. Объектно-ориентированное мышление. — СПб.: Питер, 2014. — 304 с.
@3 3. Паттерны проектирования в C# и .NET  [[https://metanit.com/sharp/patterns/]]
