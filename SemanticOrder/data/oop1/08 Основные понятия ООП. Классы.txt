@1 08 Основные понятия ООП. Классы

@2 Основные понятия ООП.
@3 ООП - методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определённого класса. Описание объектов реального мира при помощи программных объектов называют {абстрагированием}.
@3 Классы - это пользовательские типы данных, которые объединяют в себе состояние (поля) и поведение (методы). 
@3 В процессе выполнения программы объекты обмениваются сообщениями (посылка сообщения - вызов метода объекта, 
ответ на сообщение - возврат значения из метода).

@3 Основные  принципы ООП
Инкапсуляция
Наследование
Полиморфизм

@2 Пример класса - Turtle 

@3 Черепаха имеет координаты (x, y) и передвигается по экрану в направлении direct: вверх, вниз, влево, вправо.
{{
class Turtle
{        
    int x, y;
    char direct;  //'u', 'd', 'r', 'l'

    public Turtle(int x=0, int y=0, char d='r')
    {
        this.x = x;
        this.y = y;
        direct = d;
    }
}   
}}

@3 Конструируют экземпляры класса так же, как экземпляры структуры. 
{{ 
Turtle turtle = new Turtle();  
}}

@3 Поведение черепахи заключается в том, что она умеет делать шаг в текущем направлении.   
{{
public void Step() {
   if (direct == 'u')
      y -= 1;
   else if (direct == 'd')
      y += 1;
   else if (direct == 'r')
      x += 1;
   else if (direct == 'l')
      x -= 1;         
}   
}}

@3 Слово  public перед полем или методом означает, что поле или метод будут доступны и за пределами объявления класса. 
{{
   Turtle turtle = new Turtle(); 
   turtle.Step();   // правильно 
   turtle.x = 5;    // ошибка
}}

@3 Открытые (public) поля принято именовать с прописной буквы, закрытые (private) - со строчной. 
{{
public void SetDir(char d) {
    this.direct = d;
}     
}}

@3 Главное отличие класса от структуры в том, что класс это ссылочный тип, а структура - значимый.

@2 Конструкторы
@3 Главная цель создания конструктора - проинициализировать все данные   в момент создания экземпляра класса. Имя конструктора всегда совпадает  с именем   класса. У конструктора не указывается тип возвращаемого значения.

@3 Конструктор по умолчанию - не имеет параметров. Если  для класса не определить ни одного конструктора, то конструктор по умолчанию будет создан неявно, всем  полям будут присвоены  стандартные "нулевые" значения в зависимости от типа.

@3 Конструктор копирования - получает в качестве аргумента другой объект такого же типа  и копирует   значения  его полей.
@3 Конструктор может вызывать другой конструктор, что предотвращает дублирование кода
{{        
public Turtle(char d1) : this(d: d1) 
  { }
}}

@2 Инициализаторы объектов
@3Для инициализации объектов классов можно применять инициализаторы.

{{
Turtle t2 = new Turtle { x = 5, y = 5};
}}
@3 Инициализатор выполняется после конструктора, может инициализировать только открытые поля и свойства.

@2 Задачи

@6 Поворот Черепахи  | 689
@6 Черепаха Пятится  | 690
@6 Две Окружности | 165
@6 Прямоугольник | 166
@6 Прямоугольник и Точка | 164

@@ 6 Вставка в Строку | 162
@@ 6 Добавление к Строке | 161
@@ 6 Конструкторы Изменяемой Строки | 160
@@ 6 Удаление из Строки | 163



