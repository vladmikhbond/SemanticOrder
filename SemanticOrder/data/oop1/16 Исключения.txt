@1 16 Исключения

@3 Исключительная ситуация – это ситуация, которую невозможно окончательно разрешить там, где она возникла.

@2 Как выбросить исключение

@3 В исключительной ситуации программа должна выбросить исключение.  
{{
static int Factorial(int n)
{
    if (n < 0) {
        throw new ArgumentException("Факториал отрицательного числа не определен.");    **
    }
    // здесь вычисление факториала
}   
}}

@3 Выбрасывают исключения при помощи команды throw. 
Команда throw похожа на команду return – она тоже возвращает управление.  
[[fake:Что это за тип ArgumentException?]]

@3 Выброшенное исключение появится в вызывающей функции. 
{{
static void Main(string[] args)
{
    int f = Factorial(-1);  // то же, что thrоw ...
}
}}

@3 Общая картина: метод А вызывает метод В, а тот вызывает метод С.
[[ExceptionSack.png]]
Для вызывающего метода источником исключения является команда вызова.

@2 Как поймать исключение

@3 Код, способный выбросить исключение, помещается в блок try.
Сразу за блоком try следует блок catch, содержащий обработку исключения.  
{{
try
{
    int f = Factorial(-1);
    Console.WriteLine(f);
}
catch (ArgumentException ex)
{
    Console.WriteLine(ex.Message);
}
}}

@3 Объект исключения – это объект, содержащий информацию об исключительной ситуации:
- тип исключения, 
- состояние стека - последовательность вызовов методов, которая привела к исключению, 
- текстовое сообщение. 
[[fake:Зачем ловить исключения?]]

@2 Селекция исключений

@3 Селекция исключений производится на основании их типа.

@3 Каждый блок catch ловит исключения указанного в нем типа и всех потомков этого типа. 
Поэтому вначале ловят потомков, а потом предков.

@3 Правильно. 
{{
 try
 {

 }
 catch (ArgumentException ex)
 {

 }
 catch (Exception ex)
 {

 }
}}

@3 НЕ правильно. 
{{
 try
 {

  }
 catch (Exception ex)
 {

 }
 catch (ArgumentException ex)
 {

 }
}}

@3 Пример
{{
        static void Main()
        {
            try
            {
                int x = int.Parse(Console.ReadLine());    // 1 ситуация
                int y = 10 / x;   // 2 ситуация
                Console.WriteLine("y={0}", y);
                Console.WriteLine("блок try выполнилась успешно");
            }
            catch (FormatException)  // обработка 1 ситуации
            {
                Console.WriteLine("Ошибка: введено нечисловое значение!");
            }
            catch (DivideByZeroException) // обработка 2 ситуации
            {
                Console.WriteLine("Ошибка: деление на 0!");
            }
            Console.WriteLine("конец программы");
        }

}}

@2 Часто используемые типы исключений

@3
{ArithmeticException}   -   Ошибка в арифметических операциях или преобразованиях
{ArrayTypeMismatchException}   - Попытка сохранения в массиве элемента несовместимого типа 
{DivideByZeroException}  - Попытка деления на ноль
{FormatException}  - Попытка передать в метод аргумент неверного формата
{IndexOutOfRangeException} - Индекс массива выходит за границу диапазона
{InvalidCastException}  -   Ошибка преобразования типа
{OutOfMemoryException} - Недостаточно памяти для нового объекта
{OverflowException} -  Перевыполнение при выполнении арифметических операций
{StackOverflowException}  -  Переполнение стека

@2Гарантированное исполнение
@3Есть код, который следует выполнять всегда, независимо от того, было исключение или не было, например, закрывать файл после работы с ним.
Такой код помещают в блок finally, следующий после блока try.
{{
try {
     // рискованный код

     return …
     throw …
     }
catch 
{
}
finally
{
     // обязательный код
} 
}}



@2 Задачи

@6 Треугольник  | 328
@6 Два Типа Исключений  | 329
@6 Трансляция Исключений  | 330



