@1 05_ Параметри методів

@2 Модифікатор ref 

@3 Аргументи {завжди} передаються параметрам за допомогою копіювання, але для посилальних типів копіюється посилання, для значущих типів копіюється значення.

@3 Модифікатор {ref} позначає, що аргумент буде поміщений всередину безіменного об'єкта і при передачі буде скопійований не саме аргумент, а посилання на цей об'єкт.

@3 Значимий тип з {ref} ніби стає посилальним.
Метод Swap буде працювати, якщо позначити його параметри як посилальні.
{{
static void Swap(int a, int b)
{
    var t = a; a = b; b = t;
}
}}

@3 Посилальні параметри повинні бути ініціалізовані перед передачею методу. 

@3 Для посилальних типів модифікатор {ref} також може бути корисний.
З його допомогою всередині методу можна змінити не тільки значення масиву, але і посилання на нього.
{{
static void Split(string s, ref string[] arr)
{
    arr = s.Split(' ');            
}
}}

@3 В останньому прикладі краще застосувати не {ref}, а {out}.
Модифікатор {out} означає те ж, що {ref}, але не вимагає попередньої ініціалізації аргументу.
До завершення методу out-параметрам обов'язково повинні бути присвоєні допустимі значення.
 
@4 Модифікатори {out} і {ref} повинні використовуватися як при оголошенні, так і при виклику методу

@2 Методи зі змінною кількістю параметрів

@3 Якщо параметр-масив помітити як {params}, то передавати значення такому параметру можна і у вигляді масиву, і у вигляді окремих елементів. 

@3 Один з методів Console.WriteLine має змінне число аргументів.
{{
Console.WriteLine("{0} {1} {2} ", 10, 20, 30);
}} 

@3 Вхідний параметр з модифікатором {params} може бути тільки останнім у списку параметрів.

@5 Максимальне з невідомим числом параметрів | Визначити статичний метод, який може приймати в якості вхідних параметрів будь-яку кількість цілих значень або масив цілих і буде повертати максимальне значення серед отриманих. У разі виклику методу без параметрів повернути null. Допустимі виклики: MaxParam(1,6,-5); MaxParam(); MaxParam(8, -3, 19, 782, 7); MaxParam(mas); и т. п.
{{
        static int? MaxParam(params int[] m)
        {
            if (m.Length == 0)
            {
                return null;
            }
            int max= m[0];
            foreach (int b in m)
                if (b > max)
                    max = b;
            return max;
        }
}}

@2 Необов'язкові параметри

@3 В оголошенні методу частина його параметрів може отримувати значення за замовчуванням. Параметр, який отримує значення за замовчуванням, називається необов'язковий параметр. Метод, який в оголошенні містить необов'язкові параметри, може викликатися без вказівки аргументів, які відповідають цим параметрам. Аргументи, які передаються в метод і відповідають необов'язковим параметрам, називаються необов'язковими аргументами.
@3 Всі необов'язкові аргументи повинні неодмінно вказуватись праворуч від обов'язкових.

@3 Приклад 
{{
static float LineLength(float x1 = 1, float y1 = 1, float x2 = 0, float y2 = 0) { ...}
static float Operation(float op1,string sign = "+", float op2 = 1) {...}
}}

@2 Перевантаження методів

@3 Іноді буває зручно, щоб методи, що реалізують один і той же алгоритм для різних типів даних, мали одне і те ж ім'я. Використання декількох методів з одним і тим же ім'ям, але різними типами і кількістю параметрів називається перевантаженням методів. 
@3 Компілятор визначає, який саме метод потрібно викликати, за типом і кількістю фактичних параметрів. 

@5 Мінімальні значення |  Визначити статичні перевантажені методи Min, які повертають мінімальне значення, отримуючи такі варіанти вхідних параметрів: 
{{ 
- ціле число (повернути мінімальну цифру в його записи);
- два цілих числа;
- два числа з плаваючою точкою;
- два рядки (повернути меншу за довжиною);
- одновимірний масив цілих чисел;
- двовимірний масив цілих чисел.
}}

@2 Іменовані аргументи
@3 Використовуються для зміни порядку передачі значень для параметрів методів.
@3 Замість передачі параметрів виключно по позиціях (як в більшості випадків) можна вказувати ім'я кожного аргументу, двокрапку і конкретне значення. 
