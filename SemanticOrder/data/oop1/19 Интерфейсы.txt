@1 19 Интерфейсы

@3 Если взять класс, например, Point
{{
class Point 
{
    public int X { set; get; }
    public int Y { set; get; }
    
    public double Dist() 
    {
         return Math.Sqrt(X * X + Y * Y);
    }
}
}}

@3 и очистить его от реализации, получится интерфейс 
{{
interface IPoint
{
    int X { set; get; }
    int Y { set; get; }
    double Dist() ;
}
}}

@3 В  интерфейсе  могут  быть: методы, свойства, индексаторы, события, статические поля и константы (начиная с версии C# 8.0)

@3 Тип interface в С# выражает формальную часть спецификации интерфейса.
Неформальная часть спецификации состоит в словесном описании семантики свойств и методов.

@3 От абстрактного класса интерфейс всегда отличался тем, что не  мог содержать реализацию. 
@3 Начиная с версии C# 8.0 интерфейсы поддерживают реализацию методов и свойств по умолчанию.

@2 Стандартный интерфейс System.IComparable

@3 Интерфейс IComparable имеет единственный метод - CompareTo. 
{{
public interface IComparable
{
    // Если this > other, метод возвращает положительное число
    // Если this = other, метод возвращает 0
    // Если this < other, метод возвращает отрицательное число
    //
    int CompareTo(object other);
}    
}}

@3 Пример - точки. 
{{
interface IPoint
{
    int X { set; get; }
    int Y { set; get; }
}

class Point : IPoint ...
}}

@3 Такие точки нельзя  сортировать. 
{{
IPoint[] ps = { new Point ( 10, 20) , new Point (1, 2 ) };
Array.Sort(ps);
}}

@3 Точки, которые можно  сортировать. 
{{
class Point : IPoint, IComparable ...
}} 


@2 Интерфейс System.IComparer

@3 Интерфейс IComparer имеет метод Compare для сравнения двух объектов.
{{
class XComparer : IComparer
{
    public int Compare(object a, object b)
    {
        return (a as Point).X - (b as Point).X;
    }
}   

// в методе Main:
IPoint[] ps = { new Point { X = 10, Y = 20 }, new Point { X = 1, Y = 2 } };
Array.Sort(ps, new XComparer());
}}


@2 Наследование интерфейсов

@3 Интерфейсы можно наследовать.
Наследование интерфейсов - способ сократить их определение.


