@1 32 LINQ. Группирование и соединение

@2 Запрос SelectMany

@3 Вырабатывает последовательность последовательностей, а затем делает ее одноуровневой.

@3 Пример 1. Дана последовательность чисел. Выстроить цифры всех чисел в одну последовательность.
{{
int[] ns = {12, 34, 56};
var result = ns.SelectMany(n => n.ToString());
foreach(var x in result)
    Console.WriteLine(x);
}}  

@3 Пример 2. Дан двумерный невыровненный массив, например, 
{{
int[][] m = { new int[]{ 1, 2, 3 }, new int[] { 4 }, new int[] { 5, 6 } };
}} Собрать его элементы в одномерный массив int n[].
{{
var result = a2.SelectMany(x => x);
}}

@2 Запрос GroupBy

@3 Производит группирование элементов входной последовательности.
На выходе - последовательность последовательностей IGrouping с добавочным свойством Key.

@3 Пример: сгруппировать строки по длине.
{{
string[] ss = { "SELECT", "FROM", "WHERE", "ORDER BY" };
var res = ss.GroupBy(s => s.Length);

foreach (IGrouping<int, string> gr in res)
{
    Console.WriteLine($"Strings of length {gr.Key}");
    foreach (string s in gr)
        Console.WriteLine(s + " ");
}
}}

@3 Запрос GroupBy может не только сгруппировать данные, но и выполнить их проекцию. 
Выражение для проекции задается во втором параметре запроса.
{{
   var result = input.GroupBy(s => s.Length, s => s.ToLower());
}}


@2 Запрос Join  

@3 Join соединяет две входных последовательности в третью, 
но не на основе полного декартова произведения, а на основе тех пар, для которых ключи элементов совпадают.
Параметры запроса Join: 
1) первая последовательность, 
2) вторая последовательность, 
3) функция для первого ключа,
4) функция для второго ключа,
5) функция для  проекции.

@3 Пример. Имеются два массива имен. 
{{
string[] boys  = { "Alex", "Bob", "Charley", "Dick"};
string[] girls = { "Caroline", "Barbara", "Ann", "Adel"};
}}
Образовать пары, в которых начальные буквы имен совпадают.
{{
var result = boys.Join(girls, 
        b => b[0], 
        g => g[0], 
        (b, g) => new {Boy = b, Girl = g} );
}}

@2 Запрос GroupJoin

@3 Отличается от Join тем, что пару составляют элемент первой последовательности и множество соответствующих ему элементов второй последовательности.
{{
var result = boys.GroupJoin(girls, 
    b => b[0], 
    g => g[0],
    (b, gs) => new { Boy = b, Girls = gs });

   foreach (var r in result) {
      Console.WriteLine(r.Boy);
      foreach (var g in r.Girls) {
         Console.WriteLine("   " + g);
      }
   }
}}
 
@2 Задачи

@6 Книги по Декадам  | 365
@6 Читатели и Книги  | 366
@6 Строгие Читатели  | 367
