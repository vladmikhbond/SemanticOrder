@1 05 Параметры методов

@2 Модификатор ref 
@@ ref|out

@3 Аргументы {всегда} передаются параметрам при помощи копирования, но для ссылочных типов копируется ссылка, для значимых типов копируется значение.

@3 Модификатор {ref} означает, что аргумент будет заключен внутрь безымянного объекта и 
при передаче будет скопирован не сам аргумент, а ссылка на этот объект.

@3 Значимый тип с {ref} как бы становится ссылочным.
Метод Swap будет работать, если пометить его параметры как ссылочные.
{{
static void Swap(int a, int b)
{
    var t = a; a = b; b = t;
}
}}

@3 Ссылочные параметры должны быть инициализированы перед передачей мето­ду. 

@3 Для ссылочных типов модификатор {ref} также имеет смысл.
С его помощью внутри метода можно изменить не только значение массива, но и ссылку на него.
{{
static void Split(string s, ref string[] arr)
{
    arr = s.Split(' ');            
}
}}

@3 Впрочем, в последнем примере естественней применить не {ref}, а {out}.
Модификатор {out} означает то же, что {ref}, но не требует предварительной инициализации аргумента.
До завершения  метода  выходным параметрам  обязательно должны быть присвоены допустимые значения.
 
@4 Модификаторы out и ref должны использоваться  как при объявлении, так и при вызове метода

@2 Методы с переменным числом параметров
@@ paraqms

@3 Если параметр-массив пометить как {params}, 
то передавать значение такому параметру можно и в виде массива, и в виде отдельных элементов. 

@3 Один из методов Console.WriteLine имеет переменное число аргументов.
{{
Console.WriteLine("{0} {1} {2} ", 10, 20, 30);
}} 

@3 Входной параметр с модификатором {params} может быть только последним в списке параметров.

@5 Максимальное с неизвестным  числом параметров | Определить статический  метод, который  может принимать в качестве  входных  параметров любое количество  целых   значений или  массив целых и будет возвращать максимальное  значение среди полученных. В случае вызова метода  без параметров вернуть null. Допустимые вызовы: MaxParam(1,6,-5); MaxParam(); MaxParam(8, -3, 19, 782, 7); MaxParam(mas); и т. п.
{{
        static int? MaxParam(params int[] m)
        {
            if (m.Length == 0)
            {
                return null;
            }
            int max= m[0];
            foreach (int b in m)
                if (b > max)
                    max = b;
            return max;
        }
}}

@2 Определение необязательных параметров
@@ - 

@3 В объявлении метода часть его параметров может получать значение по умолчанию. Параметр, который получает значение по умолчанию, называется необязательный параметр. Метод, который в объявлении содержит необязательные параметры, может вызваться без указания аргументов, которые соответствуют этим параметрам. Аргументы, которые передаются в метод и соответствуют необязательным параметрам, называются необязательными аргументами.
@3 Все необязательные аргументы должны непременно указываться справа от обязательных.

@3 Пример 
{{
static float LineLength(float x1 = 1, float y1 = 1, float x2 = 0, float y2 = 0) { ...}
static float Operation(float op1,string sign = "+", float op2 = 1) {...}
}}

@2 Перегрузка методов
@@ gерегрузк+

@3 Иногда бывает удобно, чтобы методы, реализующие один и тот же алгоритм для различных типов данных, имели одно и то же имя. Использование нескольких методов с одним и тем же именем, но различными типами и количеством параметров называется перегрузкой методов. 
@3 Компилятор определяет, какой именно метод требуется вызвать, по типу и количеству фактических параметров. 

@5 Минимальные значения  |  Определить статические перегруженные методы Min, которые возвращают минимальное значение,  получая такие варианты входных  параметров: 
{{ 
- целое число (вернуть  минимальную цифру  в его записи);
- два целых  числа;
- два числа  с плавающей  точкой;
- две строки (вернуть меньшую  по длине);
- одномерный массив целых  чисел;
- двумерный массив  целых   чисел.
}}

@2 Именованные аргументы
@@ -

@3 Используются для  изменения  порядка передачи значений для параметров  методов.
@3 Вместо передачи параметров по позициям (как делается в большинстве случаев) можно указывать имя каждого аргумента, двоеточие и конкретное значение. 

@2 Задачи

@6 Рекурсивная Сумма Четных  | 234
@6 Рекурсивное Произведение Положительных  | 232
@6 Удаление Символов  | 300









 