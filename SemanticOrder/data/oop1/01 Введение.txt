@1 01 Введение 

@2 Перспективы семестра

@3 В конце  семестра  - 2  оценки  в  ведомостях: зачет  по  предмету   и  курсовая  работа.

@3 Зачет  по   предмету  будет   высчитываться по  заработанным   оценкам  по  лабораторным  работам и  КТ на  практиках, плюс   дополнительные  баллы.

@3 Курсовая   работа: программа, пояснительная  записка, защита 

@3 Сроки   контрольных  точек по   курсовой  работе:   

@3 - до 21.03 выбрать тему, согласовать с  руководителем (заполнить анкету);

@3 - до 22.05  показать  программу;

@3  - до   начала  сессии дописать записку и защитить работу  


@2 ООП и классы

@3 Чтобы написать большую программу, ее необходимо разделить на части - программы меньшего объема.

@3 ООП - методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определённого класса.

@3 Классы играют роль маленьких программ, у них есть данные и функции, имена которых уникальны в пределах класса.

@3 Система классов программы определяет ее структуру
(т.е. изучать нужно не ОО-программирование, а ОО-проектирование).

@3 Другая роль классов - служить типами данных. Во многих языках слова "класс" и "тип" - синонимы.

@3 Эта роль заметнее в статически типизированных языках, таких как C++, Java, C#.

@2 Платформа .NET
@@ .NET|библиотек+ класс+|двухэтапн+ компиляц+

@3 Появилась в 2002 году как ответ компании MS на распространение Java (1995).

@3 Устройство обеих платформ сходно: 
виртуальная машина , 
большая библиотека классов, 
двухэтапная компиляция.


@3 Различие в языках: в Java - 1, в .NET - ∞.

@3 В настоящее время .NET считается спецификацией, 
а платформы  .NET Framework, .NET Core, Xamarin/Mono, UWP - ее реализации.


@3 Первоначальная реализация платформы (.NET Framework) имела
- привязку к Windows, 
- закрытый исходный код. 

В .NET Core этого нет.

@3 В 2019 вышла последняя версия этой платформы - .NET Framework 4.8. Она больше не развивается
@3 Выпущенный в  ноябре 2020 года  .NET 5  стал логическим  продолжением  .NET Core.

@2 Язык C#
@@ C#|статическ+;static|Андерс+ Хейлсберг+;Anders Heylsberg

@3 C# - статически типизированный язык.
Тип имеют не только значения, но и имена. 

@3 Типизация имен - это частичная спецификация программы, 
причем такая, что может быть проверена не человеком, а компилятором.
{{
let i = 0;  // JS
i = 0.5;   
---------------
int i = 0;  // C#    
i = 0.5;    // ошибка    
}}

@3 C# - объектно-ориентированный язык.

@3 Функциональный стиль программирования тоже доступен - посредством подъязыка {LINQ} - Language Integrated Query.

@3 C# разрабатывался не сообществом, а командой.
Главный разработчик С# - Андерс Хейлсберг.
[[anders_heylsberg.png]]

@2 CLI
@@ CLI|dotnet

@3 dotnet core предоставляет разработчику интерфейс командной строки.

1 Создать новую папку  для проекта (например, test)
2 Перейти в папку
3 Запустить командную строку(cmd.exe) из каталога
4 Создать новое консольное приложение, если нужно, отредактировать в редакторе, запустить:
{{
> dotnet new console 
> dotnet run
}}
или:
{{
> md test
> cd test
> dotnet new console
> dotnet run
}}

@3 Состав файлов проекта:
 - New.csproj
 - Program.cs


@2 Visual Studio  
@@ VS|проект+;project|решени+;solution|пакет+;package|Console

@3 Версия студии - Visual Studio Community 2019. 
[[https://visualstudio.microsoft.com/ru/free-developer-offers/]]
@3 Полнофункциональная интегрированная среда разработки (IDE) для приложений Android, iOS, Windows, веб- и облачных приложений, предоставляется бесплатно для студентов, участников создания открытого исходного кода и отдельных пользователей

@3 {Проект} - папка с файлами + файл проекта *.csprj.

@3 {Решение} (solution) - несколько проектов + файл решения *.sln.

@3 {Зависимости} - сторонние пакеты программ или проекты, от которых зависит проект.


@2 Файл Program.cs
@@  пространств+ имен;namespace|точк+ входа|void|Write|WriteLine|String;string
@3 {{
using System;
namespace test
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello!");      
        }            
    }
}
}}

@3 Пространство имен - это область видимости более крупная, чем класс 

@3 Статический метод - не нуждается в объекте для своего вызова.

@3 Точка входа в программу - метод приложения, который вызывается исполняющей системой.

@3 Начиная с версии C# 9.0 (.NET 5) добавлена возможность создавать программы верхнего уровня. То есть  оставить только директивы using с подключаемыми пространствами имен и собственно исполняемые инструкции.

@3 {{
using System;

Console.WriteLine("Hello!");      

}}       


@2 Литература

@3 Троелсен, Э, Джепикс, Ф. Язык программирования C# 7 и платформы .NET и .NET Core, 8-е изд. : Пер. с англ.  СПб. : ООО “Диалектика”, 2018 — 1328 с.

@3  Бондарев, В.М. Объектно-ориентированное  программирование на С# : учеб. пособ.  / – Х. : Компания СМИТ, 2009. – 224 с. 

@3 Методичка по КП доступна на  сайте   кафедры на  странице Студентам
[[http://software.nure.ua/студентам/]]

@3 Дополнительные источники:

@3 Шилдт Г. C# 4.0.: Полное руководство : пер. с англ.- М.: Вильямс, 2011 - 1056 с.

@3 Полное руководство по языку программирования С# 9.0 и платформе .NET 5 / METANIT.COM. Сайт о программировании. URL: [[https://metanit.com/sharp/tutorial/]]

@3 Документация по .NET. URL:
[[https://docs.microsoft.com/ru-ru/dotnet/]]
