@1 03 Массивы
@@ масcив+|new|конструктор+|селектор+

@3 Массив – пронумерованная последовательность однотипных значений. 
В C# размер массива фиксирован и задается при создании массива.

@3 Массив - это ссылочный тип данных. 
[[arrays.png]]

@3 Конструктором массива служит выражение 
{{
new тип[размер] 
}}

@3 В C# вызову конструктора всегда предшествует слово new. 
{{
float[] f = new float[25]; 
short[] s = new short[n + m]; 
}}

@3 Для обращения к элементам массива используются индексы. Индекс представляет номер элемента в массиве, при этом нумерация начинается с нуля. 
{{
имя_массива[целое_выражение] 
}}

@3 Другие способы объявления и инициализации массива: 

{{
int[] arr1 = new int[5] { 1, 2, 3, 4, 5 };
double[] arr2 = new double[] {3.44, -5.6, 6.2, 8 };
short[] arr3 = { 1, 3, 5 };
}}

@2 Свойства и методы
@@ Array|Length|BinarySearch|IndexOf|Sort

@3 Массив имеет свойство {Length}, которое хранит длину массива.

@3 Пример. Вывести на экран содержимое массива m. 
{{
int[] m = new int[3] { 1, 2, 3 };
for (int i = 0; i < m.Length; i++)
{
      Console.Write(m[i]+" ");
}
}}

@3 Другое решение: 
{{
short[] arr3 = { 1, -3, 5 };            
foreach (short i in arr3)
{
    Console.Write($"{i} ");
}
}}


@3 Любой массив является экземпляром класса System.Array. 
Статические методы класса Array: 
{{
public static int BinarySearch (Array array, object value); // Выполняет поиск 
// заданного элемента во всем отсортированном одномерном массиве,
// имеет несколько перегрузок
public static void Clear (Array array, int index, int length);      // Задает для диапазона 
// элементов в массиве значение, предусмотренное по умолчанию 
// для каждого типа элементов.
public static int IndexOf (Array array, object value); // Выполняет поиск объекта 
// внутри  одномерного массива и возвращает индекс его первого вхождения ,
// имеет несколько перегрузок
public static int LastIndexOf (Array array, object value); // Выполняет поиск 
// объекта и возвращает индекс его последнего вхождения внутри  массива
public static void Reverse (Array array); // Изменяет порядок элементов в 
// одномерном массиве  на обратный
public static void Sort (Array array); // Сортирует элементы,  имеет несколько перегрузок
public static void Copy (Array source, Array destination, int length); // Копирует диапазон 
//элементов из одного массива source в другой массив destination
public static void Copy (Array source, int sourceInd, Array dest, int destInd, int length); 
// Копирует диапазон элементов из массива source, начиная с заданного индекса 
// источника, и вставляет его в другой массив dest, начиная с заданного индекса назначения.
}}

Пример вызова статического метода:
{{
Array.Clear(numbers2, 2, 5);
}}

@3 Таких методов, как push() и splice(), нет.

@3 Методы экземпляров класса Array: 

public void CopyTo (Array array, int index); // Копирует все элементы текущего одномерного массива в заданный одномерный массив начиная с указанного индекса в массиве назначения. 

Пример вызова метода экземпляра:
{{
arr1.CopyTo(arr3, 2);
}}

@2 Многомерные массивы
@@ двумерн+ массив+

@3 {{
int[,] m = new int[2, 3];
m[1, 2] = 100; 
}}

@3 Вывести двумерный массив на экран. 
{{
for (int row = 0; row < m.GetLength(0); row++)
   {
   for (int col = 0; col < m.GetLength(1); col++)
       Console.Write(m[row, col]+" ");
   Console.WriteLine();  
   } 
}}

@3 Статические методы класса Array для многомерных массивов бесполезны, 
т.к. трактуют их как одномерные, например, Length - количество всех элементов.

@2 Невыровненные (jagged) массивы
@@ jagged;][

@3 Это массивы массивов (как в JS). 
{{
int[][] m = new int[10][];
m[0] = new int[20];
m[1] = new int[30];  
}}

@2 Задачи

@6 Заполнение Массива  | 134
@6 Левый Циклический Сдвиг  | 140
@6 Обратный Массив  | 133
@6 Суммирование Массива  | 135
@6 Вставка Нулей  | 136
@6 Правый Циклический Сдвиг  | 137
@6 Слияние Массивов  | 141
@6 Треугольник Паскаля  | 143
@6 Сумма Последней Строки в Таблице  | 296
@6 Произведение Нечетных в Столбцах с Отрицательным элементом   | 293
@6 Сумма Столбца в Таблице  | 295








