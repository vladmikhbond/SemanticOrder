@1 04 Нечисловые типы данных

@2 Тип bool
@@ xor|^|VERBAR2|&&

@3 Литералы: {false}, {true}.

@3 Логические операции: 
{&&} - and
{||} - or
{!} - not 
{^} - xor.

@3 Логические выражения вычисляются по короткой схеме. 
{{
if (i < m.Length && m[i] == 5) ...

if (x != 0 && y/x > 1)...   
}}

@3 Операторы {&} и {|} означают полное вычисление логического выражения. 

@3 По отношению к целым числам операторы {&}, {|} и {~} означают побитовые операции Они выполняются над отдельными разрядами числа в двоичном  представлении. К поразрядным также 
 относятся  операции сдвига  {<<} и {>>},

@2 Типы, допускающие null

@3 Только ссылочные типы допускают универсальное значение null.

@3 Но любой значимый тип можно модифицировать так, чтобы он допускал значение null.
{{
int? x = null;
}}

@2 Тип char 
@@ char

@3 В языке C# отдельные символы представлены типом {char}.

@3 Символьные константы заключаются в одинарные кавычки: 
{{ 'а', 'B'}}

@3 Обратный слэш в константах служит для обозначения управляющих символов: 
{{
'\n', '\r', '\t', '\\'  
}}

@3 Для обозначения всех без исключения символов применяют 16-ичные константы, например, '\U0041' - латинская прописная буква "А".

@3 Код программ на C# представлен в кодировке UTF-16, т.е. два байта на символ. Это значит, что в коде допускаются символы национальных алфавитов. 
{{
int один = 1; 
}}

@2 Ввод с клавиатуры отдельных символов
@@ Read|ReadKey|Encoding

@3 Ввод одного символа 
{{
char c = (char)System.Console.Read();  
}}
Метод Read() читает символ из буфера клавиатуры. В буфер данные попадают только после нажатия клавиши Enter.

@3 Немедленный ввод символов выполняет метод ReadKey():  
{{
    for (;;)
    {
         char c = Console.ReadKey(true).KeyChar;
         Console.WriteLine("Введен символ " + c + " код=" + (int)c);
    }  
}}

@3 Может понадобится явно указать кодировку. 
{{
Console.OutputEncoding = Encoding.UTF8;
}}

@2 Кодировка ASCII
@@ ASCII

@3 Кодировка ASCII – 7-битная кодировка для представления латинского алфавита, десятичных цифр, 
некоторых знаков препинания, арифметических операций и управляющих символов (всего 128 символов). 
[[ASCIIcodes.png]]
Символы с 0 по 1F предназначались для управления устройствами ввода-вывода.

@@3 [[Bemer.png]]
Роберт Бемер – отец ASCII

@2 Кодировка Unicode
@@ Unicode|UTF-8|UTF-16

@3 В 1991 г. общественная организация Unicode Consortium (в нее вошли ведущие производители компьютеров и ПО) предложила стандарт кодирования Unicode.
[[unicode.png]]

@3 В Юникоде первые 128 символов совпадают с соответствующими символами ASCII.

@3 Юникод поддерживает несколько способов преобразования символов в байты: UTF-8, UTF-16  и UTF-32. 

@@2 UTF-8

@@3 В тексте, сохраненном в формате UTF-8, любой байт со значением меньше 128 изображает символ ASCII с тем же кодом. 

@@3 Остальные символы Юникода изображаются последовательностями длиной от 2 до 4 байтов, в которых первый байт всегда начинается с 11, а остальные с 10. 
{{
0x00000000 — 0x0000007F: 0xxxxxxx
0x00000080 — 0x000007FF: 110xxxxx 10xxxxxx
0x00000800 — 0x0000FFFF: 1110xxxx 10xxxxxx 10xxxxxx
0x00010000 — 0x001FFFFF: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  
}}

@@3 Количество единиц в префиксе первого байта показывает, сколько байтов кодируют символ.



@@2 Задачи

@@6 Поиск Вещественного Числа  | 148
@@6 Дробное Двоичное  | 150
