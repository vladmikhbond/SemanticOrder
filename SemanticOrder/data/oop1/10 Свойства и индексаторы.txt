@1 10 Свойства и индексаторы

@3 Свойства сочетают преимущества методов доступа и удобство синтаксиса полей.

@3 Пример. 
{{
class Rectangle
{
    private int width;
    private int height;

    public int Height {
        get { return height; }    // get accessor
        set { height = value; }   // set accessor
    }    

    public int Width {
        get { return width; }
        set { width = value; }
    }
}  
}}

@3 Свойство - это пара методов, один для чтения, другой для записи значения свойства.
Для клиента класса свойства выглядят как поля.  

@3 Вызов свойств

{{
Rectangle r1 = new Rectangle();
r1.Height = 3;     // запись
if (r1.Width == 0) {...} // чтение
Console.WriteLine(r1.Height + " " + r1.Width);   // чтение
}}

@2 Свойства "только для чтения"

@3 Такие свойства имеют лишь get-аксессор.
{{
class Rectangle
{
    int width;
    int height;

    public int Width {
        get { return width; }
    }
 
    public int Height {
        get { return height; }
    }    
} 
}}

@6 Класс со Свойствами | 833 

@3 За свойством не обязано стоять одно поле, например,  m.Length или DateTime.Now.

@2 Автоматические свойства

@3 Автоматическое свойство опирается на скрытое поле, к которому нет прямого доступа. 
{{
class Rectangle
{
    public int Width  {set; get; }
    public int Height {set; get; }
}    
}}

@3 Чтобы объявить автоматическое свойство "только для чтения", нужно понизить уровень доступа к set-аксессору. 
{{
class Rectangle
{
    public int Width  {private set; get; }
    public int Height {private set; get; }
}   
}}

@2 Индексаторы

@3 Индексатор – это безымянное свойство с параметрами. 
В отличие от обычного свойства индексатор не имеет собственного имени и объявляется при помощи слова this.

@3 Пример. Класс Word – инкапсулирует массив символов.  
{{
class Word
{
    char[] cs;

    public Word(string s) { 
       cs = s.ToCharArray(); 
    }

    public char this[int i]
    {
        set { cs[i] = value; }
        get { return cs[i]; }
    }
}   
}}

@2 Пример - коллекция строк

@3 Массивы имеют недостаток - у них жесткие границы.
Объявим класс {StringCollection}, который ведет себя, как неограниченный массив строк.

@3 Идея в том, чтобы прозрачно для клиента подменить текущий массив новым, большей емкости.

@3 Класс StringCollection должен открывать клиенту: 
- свойство Count - текущее количество элементов коллекции (только для чтения), 
- метод Add(string) - для добавления элемента в конец массива, 
- индексатор - для чтения и перезаписи элементов.

@3 Конструктор должен создавать пустой массив фиксированного размера.
{{
public class StringCollection
{
    private const int INIT_CAPACITY = 10;
    private string[] arr;
    public int Count { private set; get; }

    public StringCollection() {
        arr = new string[INIT_CAPACITY];
        Count = 0;
    } 
}
}}

@3 Метод Add. 
{{
    public void Add(string s) {
        if (Count == arr.Length)
            Extend();
        arr[Count++] = s;
    }
}}
 
@3 Индексатор. 
{{
    public string this[int i] {
        set { arr[i] = value; }
        get { return arr[i]; }
    }
}}

@6 Коллекция Строк | 834 

@2 Задачи

@6 Странный Индексатор | 189
@6 Основательный Прямоугольник | 190
@@6 Новая Коллекция Строк | 188


