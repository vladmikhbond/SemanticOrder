@1 33 LINQ. Прочие запросы

@2 Запросы OrderBy и ThenBy

@3 Примеры. 
{{
string[] ss = { "SELECT", "FROM", "WHERE", "ORDER BY" };

}}
@5 Упорядочить строки по алфавиту.  | 
{{
var res = ss.OrderBy(s => s);
}}
@5 Упорядочить строки по длине, а равной длины - по алфавиту.  | 
{{
var res = ss.OrderBy(s => s.Length).ThenBy(s => s);
}}

@3 {OrderByDescending()} и {ThenByDescending()} используется  для  сортировки по убыванию.

@2 Разбиение

@3 Take, Skip, TakeWhile, SkipWhile
@5 Получить последовательность чисел с  11 по 20  | 
{{
var result = Enumerable.Range(1, 30).Skip(10).Take(10);
foreach (var x in result)
     Console.WriteLine(x);
}}

@2 Множества

@3 Union, Intersect, Except, Distinct
@3 Рассмотрим  примеры
{{ string[] boys = { "Саша", "Владислав", "Женя", "Сергей", "Саша" };
   string[] girls = { "Аня", "Саша", "Женя", "Мария", "Илона" };
}}
@5 Получить все  имена  | 
{{
var res = boys.Union(girls);
}}
@5 Получить имена, которые  не  могут  быть  женскими  | 
{{
var res1 = boys.Except(girls);
}}
@5 Получить имена, которые   могут  быть  женскими и мужскими  | 
{{
var res2 = boys.Intersect(girls);
}}
@5 Получить мужские  имена  без повторений  | 
{{
var res3 = boys.Distinct();
}}


@2 Отдельные элементы

@3 First, Last, ElementAt, Single 
@3 ...OrDefault

@3 Рассмотрим  примеры

@5 Получить первое  женское  имя  | 
{{
string girl = girls.First();
}}
@5 Получить первое  женское  имя на  букву С  | 
{{
string girl1 = girls.First(x=>x[0]=='С');
}}
@5 Получить первое  женское  имя на  букву K или пустую  строку  | 
{{
string girl1 = girls.FirstOrDefault(x=>x[0]=='К');
}}
@5 Получить третье  мужское  имя  | 
{{
string boy = boys.ElementAt(3);
}}

@2 Кванторы

@3 All, Any, Contains
@5 Проверка, есть ли  хоть одно  мужское имя в  большом  регистре  | 
{{
bool any = boys.Any(s => s==s.ToUpper());
}}
@5 Проверка, что нет ни одного  мужского  имени начинающегося  на  букву Р  | 
{{
bool all = boys.All(s => s[0] != 'Р');
}}

@2 Генераторы

@3 Repeat, Range, Empty

@5 Периодическая последовательность | Получить n первых членов последовательности, составленной из повторений четверки { 2, 5, 13, 10 } .
{{
int n = 10;
int[] a = { 2, 5, 13, 10 };
var result = Enumerable.Repeat(a, int.MaxValue)
    .SelectMany(x => x)
    .Take(n);
}}

@2 Преобразование типа итераторов

@3 ToArray, ToList, ToDictionary, ToLookup
 
@3 AsEnumerable - для разрешения вызова методов (когда коллекция имеет методы, одноименные с функциями LINQ)

@2 Преобразование типа элементов

@3 Cast{<}T{>}() - то же, что
{{ 
  foreach(object o in source)
    yield return (T) o;
}}

@3 TypeOf{<}T{>}() - фильтрация по типу. То же, что
{{
  foreach(object o in source)
    if(o is T)
      yield return (T) o;
}}

@3 {Разное}
Zip, Concat, Reverse, SequenceEqual, 

DefaultIfEmpty - если коллекция{<}T{>} пуста, возвращается последовательность из одного элемента - default(T)

@5 Получить все  имена с повторениями  | 
{{
var res4 = boys.Concat(girls);
}}

@5 Получить пары   мальчиков  и девочек  по порядку  | 
{{
var result2 = boys.Zip(girls,  (b, g) => new { Boy = b, Girl = g });
foreach (var r in result2)
{
     Console.WriteLine(r.Boy + " " + r.Girl);
}
}}

@2 Задачи

@6 Книги с Оценками  | 369
@6 Книги Без Оценок  | 370
@6 Факториал Числа  | 371
