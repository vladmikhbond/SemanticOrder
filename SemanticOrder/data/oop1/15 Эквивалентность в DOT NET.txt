@1 15 Эквивалентность в DOT NET

@3 Проверить, эквивалентны ли два объекта в .NET можно при помощи:
1) виртуального метода {Equals},
2) статического метода {Equals},
3) операций {==} и {!=}.

@3 Метод Equals() класса object считает объект эквивалентным только самому себе.
Если это неприемлемо, виртуальный метод Equals должен быть перекрыт.

@3 Метод Equals() не должен нарушать законы для эквивалентности: рефлексивность, симметричность и транзитивность.
Метод Equals() не должен выбрасывать исключений.

@2 Пример. Equals в классе Point

@3 Перекроем метод Equals() в классе Point. 
Проверка эквивалентности должна начинаться с проверки однотипности this и obj. 
{{
public override bool Equals(Object obj)
{
    if ((obj == null) || ! this.GetType().Equals(obj.GetType()))   **
         return false;             **
}
}}

@3 Далее нужно привести тип и выполнить содержательную часть проверки. 
{{
public override bool Equals(Object obj)
{
    if ((obj == null) || ! this.GetType().Equals(obj.GetType()))  
         return false;  
    Point p = (Point) obj;                     **
    return (X == p.X) && (Y == p.Y);  **
}
}}

@2 Эквивалентна ли точка цветной точке?

@3 Определения классов Point и ColoredPoint. 
{{
class Point
{
    public int Y {set; get;}
    public int X {set; get;}
}

class ColoredPoint: Point
{
    public int C {set; get;}
}
}}

Может показаться, что можно сравнивать точки с цветными точками (т.е. проверку типов можно ослабить). 
{{
(3, 5, Red) == (3, 5)
(3, 5, Green) == (3, 5)
}}

@3 Но если (3, 5, Red) == (3, 5) и (3, 5) == (3, 5, Green), то по транзитивности
(3, 5, Red) == (3, 5, Green).

@2 Другие методы класса Object

@3 Статический метод Equals
{{
public static bool Equals(object objA, object objB);   
}}

@3 Статический метод ReferenceEquals
{{
public static bool ReferenceEquals(object objA, object objB);  
}}


@3 Метод GetHashCode. У эквивалентных объектов должны быть одинаковые хеш-коды.
{{
public virtual int GetHashCode();
}}
[[https://habrahabr.ru/post/188038/]] - статья про метод GetHashCode()

@3 Порядок пользовательского определения  эквивалентности:
1) перекрываем метод экземпляра Equals();
2) перекрываем метод экземпляра GetHashCode();
3) остальные методы не трогаем.

@5 1 | Перекрыть метод GetHashCode() для класса Point.


@2 Эквивалентность структур

@3 По умолчанию две структуры считаются эквивалентными, если попарно эквивалентны все их поля. 

@3 Проверка эквивалентности по умолчанию использует механизм отражения и занимает много времени, поэтому метод Equals() в структурах положено перекрывать.

@6 Класс с методом Equals()  | 220
