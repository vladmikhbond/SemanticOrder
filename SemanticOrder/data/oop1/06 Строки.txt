@1 06 Строки

@3 Тип {System.String} можно охарактеризовать как неизменяемый массив символов. 
{{
string s = "abc";
s[0] = 'd';        // ОШИБКА!   
}}

@2 Строковые литералы

@3 Обычный {{ 
"Hello!\n"          
"C:\\Files" 
}}

@3 Дословные строки

{{
 @"C:\Files"  // "C:\\Files"
@"Строка  с ""кавычками"""; //   "Строка  с \"кавычками\""
 @"first
    second third";
}}

@3 Строковая интерполяция
{{
int x = 5;
$"На руке {x} пальцев"
}}

@2 Конструкторы и селекторы

@3 Конструктором строки является функция string() 
{{
string s = new string('a', 10); 
}}

@3 Тип {string} - ссылочный.
Здесь копируется ссылка 
{{
string s1 = s;
}}

@3 Здесь создается новая строка.
{{
string s2 = new string('a', 10); 
}}

@3 Селекторы выглядят так же, как селекторы массива.
 
@2 Операции над строками

@3 {{string s = "abc" + "defg";  }}

@3 {{s[s.Length – 1]                 // обращение  к последнему  символу   строки }}

@3 {{s.Substring(p, n)               // получение подстроки начиная с указанной позиции знака  p  указанной длины  n}}

@3 {{s.Substring(p)               // получение подстроки начиная с указанной позиции знака  p  до конца строки}}

@3 {{s.IndexOf(c)                    // индекс первого вхождения отдельного символа или подстроки  }}

@3 {{s.LastIndexOf(c)                // индекс последнего вхождения символа или подстроки  }}

@3 {{s.Split(new char[] { ' ', ',' });  // разделение строки на массив подстрок  }}

@3 {{s.Insert(3, subString);    // возвращает новую строку, в которой указанная строка вставляется в указанной позиции индекса}}

@3 {{s.Remove(ind);   // возвращает новую строку, в которой были удалены все символы, начиная с указанной позиции и до конца}}

@2 Ввод и вывод на консоль

@3 {Ввод с консоли}
{{     
string s = Console.ReadLine();

// Преобразование к целому.
short h = Convert.ToInt16(s);   // h = Int16.Parse(s);
int i = Convert.ToInt32(s);      //   i = Int32.Parse(s);
long l = Convert.ToInt64(s);    //   l = Int64.Parse(s);

// Преобразование к вещественному.
float f = Convert.ToSingle(s); //  f = Single.Parse(s);
double d = Convert.ToDouble(s);    // d = Double.Parse(s);
}}

@3 Преобразование с проверкой
{{
if (Int32.TryParse(s,out int i1) ) 
                Console.WriteLine(i1);
}}

@3 Когда строка может быть преобразована в запрошенный тип данных, метод TryParse () возвращает true и присваивает разобранное значение переменной, переданной методу. В случае невозможности разбора значения перемен­ной присваивается стандартное значение, а метод TryParse () возвращает false.

@3 {Вывод строк}
{{
int x = 10, y = 20;
Console.Write("Ширина = "+ x +"  Высота = " + y);   
}}

@3 Вывод с форматированием. 
{{
Console.Write("Ширина = {0}  Высота = {1}", x, y);   

Console.Write($"Ширина = {x}  Высота = {y}");   
}}

@2 Форматирование чисел

@3 Шаблон для форматирования чисел может включать в себя дополнительную информацию. В целом его структура такова: 
{{
{ index [,alignment] [:formatString] }
}}
{index} – номер значения в списке значений;
{alignment} – целое со знаком – ширина поля и выравнивание (если ширина положительная – выравнивание вправо, если отрицательная – влево);
{:formatString} – формат представления.

@3 Например,
{{
{0,-10:F2} 
}}означает: выравнивание влево, ширина не менее 10 позиций, формат с фиксированной точкой, 2 знака после запятой.

@2 Изменяемые строки System.Text.StringBuilder
@3 Уникальность класса StringBuilder в том, что при вызове его членов производится прямое изменение внутренних символьных данных объекта без получения копии данных в модифицированном формате. 

@2 Задачи

@6 Слова в Рифму  | 151
@6 Сколько Вхождений  | 152
@6 Последнее Вхождение  | 153
@6 Анаграммы  | 155

