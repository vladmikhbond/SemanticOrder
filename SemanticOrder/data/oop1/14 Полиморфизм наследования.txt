@1 14 Полиморфизм наследования

@3 Слово "полиморфизм" означает различные по форме проявления одной и той же сущности.

@3 В программировании встречаются разные виды полиморфизма, 
с виртуальными методами связан полиморфизм наследования.

@@3(метод Console.Write, константа null, перегрузка методов, перегрузка операций)

@3 Полиморфизм наследования достигается путем наследования общего предка с виртуальными методами.

@3 Цель такого наследования не расширить возможности предка, а изменить его поведение в потомках. 
В идеале полиморфный предок уже должен иметь все методы и свойства, какие будут у его потомков.

@2 Пример. Модель библиотеки

@3 В библиотеке хранятся книги и журналы, (газеты, рукописи, CD,...).
О книге известно: Автор, Название
О журнале известно: Название, Год и Выпуск
{{
public class Book
{
    public string Title { get; set; }
    public string Author { get; set; }
}

public class Magazine
{
    public string Title { get; set; }
    public int Year { get; set; }
    public int Issue { get; set; }
}
}}

@3 С книгами и журналами выполняются одинаковые операции: добавление, удаление, поиск, прием, выдача.
Поэтому унаследуем их от общего предка Unit и будем хранить в виде массива Unit[].
{{
public class Unit
{
    public string Title { get; set; }
}

Unit[] units = {
    new Book { Title = "Вий", Author = "Гоголь" },
    new Magazine { Title = "Chip", Year = 2020, Issue = 5 } };

}}


@3 Для представления результатов поиска добавим в Unit виртуальное свойство Info
{{
public virtual string Info { get; set; }
}}

@2 Абстрактные классы

@3 Unit - полиморфный тип. Он обязан иметь все методы, которые будут замещены в потомках, но не обязан их реализовывать. 
Сделаем Unit абстрактным классом.

@3 Абстрактные классы нельзя инстанцировать, их нужно только наследовать. 


@2 Пример задания  лабораторной работы
@3 1 Разработать систему классов для геометрических фигур ....
 2 Определите в этих классах методы, которые: 
• перемещают фигуру по плоскости (на заданное расстояние или в нужную позицию);
• масштабируют фигуру;
• вычисляют и возвращают площадь фигуры, периметр;
• возвращают строку символов, отражающую имя класса и состояние объекта (его основные характеристики);
• рисуют фигуру в консоли или на форме (для объемных фигур достаточно проекции,  например, изометрической или диметрической);
...
5 Объявите класс «Изображение», имеющий свое положение на плоскости и размер,  и владеющий коллекцией различных фигур.
6 В классе «Изображение» определите методы:
• возвращающие суммарную площадь фигур, суммарный периметр;
• сдвигающий все фигуры внутри изображения;
• передвигающий изображение;
• масштабирующий изображения (изменяющий его размер вместе с фигурами  с сохранением пропорций);
• возвращающий полное состояние изображения в виде строки;
• объединяющий два изображения;
• рисующий все фигуры в консоли или на форме;
• сохраняющий и загружающий изображения из файла;
...
[[изображение_2021-04-01_003123.png]]

@2 Виртуальные методы класса Object

@3 Все типы .NET  (в том числе структуры) наследуют библиотечный класс System.Object.

@3 В классе Object есть три виртуальных метода, которые следует перекрывать.
{{
public virtual string ToString();
public virtual bool Equals(Object obj);
public virtual int GetHashCode();
}}

@3 Вот что происходит, если этого не делать.
{{
Unit book1 = new Book { Title = "Вий", Author = "Гоголь" };
Unit book2 = new Book { Title = "Вий", Author = "Гоголь" };
Console.WriteLine(book1 == book2);
}}

@3 Метод ToString() не должен возвращать null или пустую строку.
Соглашения по поводу Equals и GetHashCode изложены в  разделе "Эквивалентность в .NET".

@2 Задачи

@6 Абстрактный Базовый Прямоугольник | 196
@6 Полиморфные Прямоугольник и Квадрат | 197
@6 Полиморфный Эллипс | 198
@6 Сумма Площадей | 199
@6 Перекрытие ToString  | 648



