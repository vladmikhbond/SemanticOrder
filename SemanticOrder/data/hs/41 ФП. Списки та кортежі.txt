@1 41 ФП. Списки та кортежі

@2 Списки

@3 Список складається лише з однотипних елементів.

@3 Оскільки список - складена структура даних, в нього є конструктори.
Їх у списку два:  [] і (:).

@3 Стандартні функції для списків
{{
head
tail
(++) 
(!!)
}}

@3 Списки-прогресії можна задавати так
{{
[1 ..10]
[1, 3 ..10]
[1, 2 ..]
}}

@3 Генератори списків
- дозволяють відображувати і фільтрувати списки.
{{
[ x^2 | x <- [1..10] ]
}}

@2 Кортежі

@3 Кортежі складаються з різнотипних елементів.
Конструктор кортежу виглядає так
(,,)

@3 Функції для двохелементного кортежу:
fst
snd

@2 Рекурсія

@3 НОД
{{
gcd a 0 = a
gcd a b = gcd b (a `mod` b)
}}

@3 Факторіал
{{
f 0 = 1
f n = n * f (n - 1)
}}

@2 Співставлення зі зразком

@3 В лівій частині рівнянь місце параметрів функцій часто займають зразки - 
вирази, які складаються з конструкторів і змінних.
Вибір підходящого рівняння відбувається в результаті зіставлення зі зразком.

@3 Приклад - скласти всі числа у масиві.
{{
sum [] = 0
sum (x : xs) = x + sum xs
}}

@3 Функції fst s snd
{{
fst (a, _) = a
}}

@2 Локальні визначення

@3 Вирішити квадратне рівняння.
{{
main = print $ quadraticEquation 2 3 (-4)

quadraticEquation a b c = let d = b * b - 4 * a * c 
 in if d >= 0 
    then ((-a + sqrt (d)) / 2, (-a - sqrt (d)) / 2) 
    else error "no roots"
}}

@3 Локальні визначення робляться виразом let-in 
або реченням where.
{{
quadraticEquation a b c = 
 if d >= 0 
   then ((-a + sqrt (d)) / 2, (-a - sqrt (d)) / 2) 
   else error "no roots"
 where
   d = b * b - 4 * a * c 
}}
 
@2 ФВП

@3 ФВП позбавляють рекурсії. бо містять рекурсію в собі.

@3 Функція map - аналог методу map у JS 
{{
> map (^2) [1..6] 
[1,4,9,16,25,36]
}}

@3 Функція filter - аналог методу filter у JS 
{{
> filter (>0) [2,-4, 3, 5 ,-1]
[2,3,5]
}}

@3  Функція foldr - аналог методу reduce у JS
{{
> foldr (+) 0 [1..10]
55
}} 

