@1 03 Массивы

@3 Массив – пронумерованная последовательность однотипных значений.
В C# размер массива фиксирован и задается при создании массива.

@3 Массив - это ссылочный тип данных. 
[[arrays.png]]

@2 Конструкторы и селекторы

@3 Конструктором массива служит выражение 
{{
new тип[размер] 
}}

@3 В C# вызову конструктора всегда предшествует слово new.
{{
float[] f = new float[25]; 
short[] s = new short[n + m]; 
}}

@3 Селектором массива является выражение. 
{{
имя_массива[целое_выражение] 
}}

@2 Свойства и методы

@3 Массив имеет свойство {Length}, которое хранит длину массива.

@3 Пример. Вывести на экран содержимое массива m. 
{{
int[] m = new int[3];
m[0] = 1; m[1] = 2; m[2] = 3; 

int i = 0;
while(i < m.Length) 
{
    Console.Write(m[i]);
    i += 1;
}   
}}

@3 Другое решение: 
{{
int[] m = {1,2,3};  // выражение инициализации

foreach (int x in m) 
     Console.Write(x);   
}}


@3 Любой массив является экземпляром класса System.Array. 
Статические методы класса Array: 
{{
BinarySearch
Clear
IndexOf
LastIndexOf
Reverse
Sort   
}}

@3 Таких методов, как push() и splice(), нет.

@6 Заполнение Массива  | 134

@2 Вreak, continue и goto

@3 Они в C# есть. 
[[breakCommand.png]]

@6 Левый Циклический Сдвиг  | 140

@2 Многомерные массивы

@3 {{
int[,] m = new int[10, 20];
m[1, 2] = 100; 
}}

@3 Вывести двумерный массив на экран. 
{{
for (int row = 0; row < m.GetLength(0); row++)
   for (int col = 0; col < m.GetLength(1); col++)
      Console.Write(m[row, col]);
   Console.WriteLine();   
}}

@3 Статические методы класса Array для многомерных массивов бесполезны, 
т.к. трактуют их как одномерные, например, Length - количество всех элементов.

@2 Невыровненные (jagged) массивы

@3 Это массивы массивов (как в JS). 
{{
int[][] m = new int[10][];
m[0] = new int[20];
m[1] = new int[30];  
}}

@2 Задачи

@6 Обратный Массив  | 133
@6 Суммирование Массива  | 135
@6 Вставка Нулей  | 136
@6 Правый Циклический Сдвиг  | 137
@6 Слияние Массивов  | 141
@6 Треугольник Паскаля  | 143

