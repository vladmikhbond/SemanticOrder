@1 25 Події

@2 Події в C#
@@ event;подія;події;подій|джерел+ поді+|слухач+;обробник+

@3 Події - це корисна метафора.
Є об'єкт - джерело подій.
Є функції, підписані на цей вид подій (слухачі події).
Коли відбувається подія, автоматично викликаються всі функції, підписані на цю подію.
[[events.png]]

@3 Джерело подій має список посилань на слухачів, який спочатку порожній.
Підписка полягає в тому, що до списку додається посилання на функцію, "відписка" - у тому, що посилання на функцію видаляється зі списку.

@3 Підтримка подій у мові С# полягає в існуванні спеціального члена класу - event.
Тип event'a – MulticastDelegate.
Нагадаємо, що останній здатен посилатися одразу на декілька однотипних функцій.

@3 З event'ом можна виконувати три операції:
- підписку,
- відписку,
- виклик (тільки з визначення класу - джерела події).

@2 Приклад. Колекція з подіями
@@ -

@3 Є колекція, до якої можна додавати та видаляти елементи.
{{
public class MyList<T> : List<T> { }
}}

@3 Колекція видає подію Changed, коли її вміст змінюється.
{{
public class MyList<T> : List<T>
{
    public event Action<T> Changed;

    public new void Add(T item)
    {
        base.Add(item);
        Changed?.Invoke(item);
    }
 
   //public new void Remove(T item) {. . .}
}
}}

@3 Знак питання застерігає від помилки, яка станеться,
якщо на подію не підписаний жоден слухач.

@3 Задля перевірки створимо колекцію книг
і додамо слухача події Changed.
{{
MyList<Book> books = new MyList<Book>();

books.Changed += changeHandler;

// --- перевірка ---
Console.ReadLine();
books.Add(new Book { Title = "aaaa" });
Console.ReadLine();
books.Changed -= changeHandler;
books.Add(new Book { Title = "bbbb" });
Console.ReadLine();
books.Add(new Book { Title = "cccc" });
// ----------------

// буде слухати подію
void changeHandler(Book book)
{
   Console.WriteLine($"{book.Title}/{books.Count}");
}

class Book
{
    public string Title {set; get; }
}
}}

@3 Відписатися від події можна операцією -=.
{{
books.Changed -= changeHandler;
}}

@3 В метод-слухач передається додаткова інформація про подію, якщо така є.
У нашому прикладі це видалена чи додана книга.


@2 Метод On
@@ делегуванн+

@3 Зазвичай подія Xxx видається у спеціальному методі джерела OnXxx().
{{
public void OnChanged(T item)
{
    Changed?.Invoke(item);
}
}}

@3 Це дозволяє обирати спосіб обробки події - 
успадкування або делегування.


@2 Завдання

@6 Події Створення та Видалення | 227
@6 Подія Просте Число | 228
@6 Клас з подією Bang | 647