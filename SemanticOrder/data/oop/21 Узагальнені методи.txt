@1 21 Узагальнені методи

@2 Принцип підстановки Лісков
@@ Лісков;Liskov|узагальнен+ тип+|принцип+ підстановки

@3 Узагальнені типи є і в C++, і в Java, але вперше узагальнені типи з'явилися в 1970-х в мові Клу (Барбара Лісков).

@3 [[barbara-liskov.png]]
Професор Массачусетського технологічного інституту (MIT) Барбара Лісков (Barbara Liskov) 
отримала премію Тюрінга за внесок у теорію абстракції даних, яка спрощує створення складних програм.

@3 Барбара Лисков сформулювала визначення поняття підтипу, відоме як принцип підстановки Лісков:

Нехай існує об'єкт t типу T, і він має властивість P.
Нехай поряд з тим існує об'єкт s типу S.
Тип S є підтипом T лише в тому разі, якщо об'єкт s також має властивість P.

@3 Іншими словами, нащадок може тільки розширювати можливості предка, але не зменшувати і не змінювати їх.

@3 Або так, функції, які використовують базовий тип, повинні мати можливість використовувати підтипи базового типу.

@3 Тобто, якщо у програмі підмінити всі об'єкти об'єктами похідних типів, вона повинна продовжувати працювати правильно.

@3 Наприклад, при наслідуванні Point <- ColoredPoint принцип підстановки виконується.
Але якщо у ColoredPoint характеристики X і Y перевизначити так, щоб вони були лише додатними
або лише для читання, принцип підстановки порушиться.

@2 Узагальнені методи
@@ узагальнен+ метод+

@3 Щоб написати узагальнений метод, спочатку потрібно написати звичайний метод,
а потім замінити конкретний тип параметром.

@3 Наприклад, визначимо функцію, що підраховує, скільки разів в масиві xs зустрічається заданий елемент k.
{{
static int Count(int[] xs, int k)
{
    int count = 0;
    foreach (int x in xs)
        if (x == k)
            count++;
    return count;
}
}}

@3 Тепер заміним конкретний тип параметром
{{
static int Count<T>(T[] xs, T k) 
{
    int count = 0;
    foreach (T x in xs)
        if (x == k)
            count++;
    return count;
}
}}

@3 У виклику узагальненого методу, крім аргументів-даних, потрібно задавати і аргументи-типи.

@3 Якщо тип не задається, компілятор спробує вивести його сам.
{{
int n = Count(ss, "a")
}}

@3 Він зробить це, вирішивши систему рівнянь на кшталт такої:
{{
     string[] = T[]
     string = T
}}

@2 Обмеження типу
@@ обмеженн+ типу|where

@3 Ми можемо написати узагальнений метод, який не зможе виконатись для деяких типів-аргументів. 
Метод One повертає масив з одного екземпляру типу T.
{{
// метод – фабрика
static T[] One<T>() {
     T[] t = {new T()};
     return t;
}
}}

@3 Цей код не компілюється, оскільки він вірний лише для тих типів, які мають конструктор за замовчанням.
Щоб код компілювався, на параметр T потрібно накласти обмеження.

@3 Обмеження на типи-параметри викладаються у пропозиції where.
{{
static T[] One <T>() where T: new() {
    T[] t = {new T()};
    return t;
}
}}

@3 Всього є чотири види обмежень:
{{
where T: struct,  // T - значущий тип
where T: class,   // T - посилальний тип
where T: new()    // T має конструктор за замовчуванням
where T: X1, X2, . . . // T успадковує клас або інтерфейси X1, X2, . . .
}}

@2 Завдання

@6 Узагальнене Незрівняння | 201
@6 Узагальнений Пошук | 202
@6 Узагальнений Максимум | 203
@6 Узагальнений метод Zip | 222
@6 Узагальнений Метод Agregate | 223
@6 Узагальнена Композиція | 225