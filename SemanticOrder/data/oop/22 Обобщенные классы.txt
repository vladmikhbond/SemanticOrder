@1 22 Обобщенные классы

@3 Пример. Коллекция объектов.
{{
public class MyCollection
{
    private const int INIT_CAPACITY = 10;
    private object[] arr;
    public int Count { private set; get; }

    public MyCollection()
    {
        arr = new object[INIT_CAPACITY];
        Count = 0;
    }

    public void Add(object value)
    {
        if (Count == arr.Length - 1)
            Extend();
        arr[Count++] = value;
    }

    private void Extend()
    {
        object[] arr1 = new object[arr.Length * 2];
        Array.Copy(arr, arr1, arr.Length);
        arr = arr1;
    }
}
}}

@3 Сделаем коллекцию MyCollection обобщенной.
{{
class MyCollection<T>  ...
}}

@3 Обобщенные классы могут наследовать от простых или от обобщенных классов.

@2 Библиотечные обобщенные типы

@3 Делегаты {Func<T1, T2, Tr>} и {Action<T1, T2>}
{{
int Plus(int a, int b) { return a + b; }

Func<int, int, int> f = new Func<int, int, int>(Plus);

Console.WriteLine(f(2, 3));
}}

@3 Типы, допускающие null.
{{
Nullable<int> x = null;

Console.WriteLine(x.HasValue);
Console.WriteLine(x.Value);
}}

@3 Все типизированные коллекции.

@2 Обобщенные интерфейсы

@3 Интерфейс IComparable <T>


@3 Целочисленные точки, которые можно сравнивать 
{{
class Point : IComparable<Point>
{
    public int X { set; get; }
    public int Y { set; get; }

    public int CompareTo(Point other)
    {
        return X = other.X;
    }
}
}}

@3 Обобщенные точки, которые можно сравнивать
{{
class Point<T>: IComparable<Point<T>> where T : IComparable<T>
{
    public T X { set; get; }
    public T Y { set; get; }

    public int CompareTo(Point<T> other)
    {
        return X.CompareTo(other.X);
    }
}   
}}

@5 1 | Реализовать интерфейс IComparable<Rect> в классе Rect с открытыми свойствами W (ширина) и H (высота). Полагать бОльшим тот прямоугольник, у которого больше площадь. 
{{
class Rect : IComparable<Rect>
{
    public int W, H;

    public int CompareTo(Rect other)
    {
        return W * H - other.W * other.H;
    }
}
}}

@3 {Замечание}. Обобщенные методы и классы являют собой еще один вид полиморфизма - параметрический.  


@2 Задачи

@6 Двумерный Индексатор | 926 
@6 Класс с Методом ToString()  | 200
@6 Обобщенная Точка  | 204


