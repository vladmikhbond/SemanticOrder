@1 13 Поліморфізм спадкування

@2 Поліморфізм
@@ поліморфізм+

@3 Слово "поліморфізм" означає різні за формою прояви однієї сутності.

@3 У програмуванні зустрічаються різні види поліморфізму (метод Console.Write, константа null, перевантаження методів, перевантаження операцій)
з віртуальними методами пов'язаний поліморфізм спадкування.

@3 Поліморфізм спадкування є результатом успадкування загального предка з віртуальними методами.
Мета такого спадкування не розширити можливості предка, а змінювати його поведінку в нащадках.
В ідеалі предок вже повинен мати всі методи та властивості, які будуть у його нащадків.

@2 Приклад. Модель бібліотеки
@@ -

@3 У бібліотеці зберігаються книги та журнали.
Про книгу відомо: Автор, Назва
Про журнал відомо: Назва, Рік та Випуск
{{
public class Book
{
    public string Title {get; set; }
    public string Author { get; set; }
}

public class Magazine
{
    public string Title {get; set; }
    public int Year { get; set; }
    public int Issue { get; set; }
}
}}

@3 З книгами та журналами в бібліотеці виконуються однакові операції: додавання, видалення, пошук.
Якщо класи Book і Magazine ніяк не пов'язані між собою, для збереження даних знадобляться два різних масиви Books і Magazins
і всі перераховані операції будуть запрограмовані двічі. 

@3 Цього можна уникнути, якщо успадкувати класи Book і Magazin від загального предка,
назвемо його Unit - одиниця зберігання.
{{
public class Unit
{
   public string Title { get; set; }
}

public class Book : Unit
{
   public string Author { get; set; }
}

public class Magazine : Unit
{
   public int Year { get; set; }
   public int Issue { get; set; }
}
}}

@3 Тепер для зберігання даних буде достатньо одного масиву - Units.
{{
Unit[] units = {
    new Book { Title = "Вій", Author = "Гоголь"},
    new Magazine { Title = "Chip", Year = 2018, Issue = 5 } };
}}

@3 Що стосується пошуку, тут можна впровадити віртуальний метод GetInfo(), 
який буде повертати рядок з інформацією, актуальною для знайденої одиниці зберігання.
Остаточно маємо:
{{
public class Unit
{
   public string Title { get; set; }

   public virtual string GetInfo() { return null; }
}

public class Book : Unit
{
   public string Author { get; set; }

   public override string GetInfo() { 
      return $"Book: {Title} by {Author}"; 
   }
}

public class Magazine : Unit
{
   public int Year { get; set; 

   public int Issue { get; set; }

   public override string GetInfo()
   {
      return $"Magazine: {Title}, {Year}, {Issue}";
   }
}
}}

@2 Абстрактні класи
@@ abstract;абстрактн+ клас+;абстрактн+ метод+

@3 У попередньому прикладі метод
{{
 public virtual string GetInfo() { return null; }
}} виглядає дивно.
Його реалізація суто формальна і не має ніякої користі.

@3 Саме на такий випадок в C# існують абстрактні класи.
Зробимо клас Unit абстрактним.
{{
public abstract class Unit
{
   public string Title { get; set; }

   public abstract string GetInfo();
}
}} 

@3 Абстрактні класи не потребують реалізації усіх заявлених методів,
і це дозволяє уникати некорисного коду.

@3 Заборонено створювати екземпляри абстрактних класів,
вони існують суто для успадкування.

@2 Завдання

@6 Абстрактний Базовий Прямокутник | 196
@6 Поліморфні Прямокутник та Квадрат | 197
@6 Поліморфний Еліпс | 198
@6 Сума Площ | 199
@6 Перекриття ToString | 648