@1 15 Винятки

@2 Як створити виняток
@@ винят+|throw|ArgumentException

@3 Виняткова ситуація - це ситуація, яку неможливо остаточно вирішити там, де вона виникла.

@3 У винятковій ситуації програма повинна створити виняток.
{{
static int Factorial(int n)
{
    if (n < 0) {
        throw new ArgumentException("Факторіал від'ємного числа не визначений."); **
    }
    // Тут обчислення факторіалу
}
}}

@3 Створюють (або викидають) винятки за допомогою команди throw.
Команда throw схожа на команду return тим, що також повертає керування з методу.

@3 Викинутий виняток з'явиться в тій функції, що викликала дану.
{{
static void Main(string[] args)
{
    int f = Factorial(-1); // те саме, що thrоw ...
}
}}

@3 Загальна картина: метод А викликає метод B, а той викликає метод C.
[[ExceptionSack.png]]
Для методу, що викликає, джерелом винятку є команда виклику.

@2 Як зловити виняток
@@ catch

@3 Код, здатний викинути виняток (ризикований код), вміщується в блок try.
Одразу за блоком try слідує блок catch, що містить обробку винятку.
{{
try
{
    int f = Factorial(-1);
    Console.WriteLine(f);
}
catch (ArgumentException ex)
{
    Console.WriteLine(ex.Message);
}
}}

@3 Об'єкт винятку – це об'єкт, що містить інформацію про виняткову ситуацію:
- тип винятку,
- стан стеку - послідовність викликів методів, що призвела до винятку,
- текстове повідомлення.

@2 Селекція винятків
@@ Exception

@3 Селекція винятків проводиться на підставі їхнього типу.

@3 Кожен блок catch ловить винятки зазначеного типу та всіх нащадків цього типу.
Тому спочатку ловлять нащадків, а потім предків.

@ 3 Правильно.
{{
try {

}
catch (ArgumentException ex) {

}
catch (Exception ex) {

}
}}

@3 НЕ правильно. {{
try {

}
catch (Exception ex) {

}
catch (ArgumentException ex) {

}
}}

@2 Завдання

@6 Трикутник | 328
@6 Два типи винятків | 329
@6 Трансляція Винятків | 330