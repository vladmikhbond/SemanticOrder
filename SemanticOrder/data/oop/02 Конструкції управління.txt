@1 02 Конструкції управління

@2 Система типів
@@ значущі+ тип+;value types|посилальн+ тип+;reference types

@3 Типи С# поділяються на значущі (value types) та посилальні (reference types).

@3 Значущі типи компактно зберігаються у пам'яті.
Посилальні типи зберігаються розділено.
[[cs-type-system.jpg]]

@2 Присвоювання
@@ присвоюванн+|термінатор+|сепаратор+

@4 ім'я = вираз;

@3 Типи лівої та правої частини присвоювання повинні збігатися.

@3 Якщо типи не співпадають, іноді можна перетворити тип, явно (explicit) або неявно (implicit).
{{
int i = 5;
long l = 5555555555555555;

i = (int) l;
l = i;
}}

@3 У мові C# точка з комою є термінатором, а не сепаратором, як у JS.
Точка з комою стоїть наприкінці кожної команди.

@3 Ланцюжкове присвоєння
{{
int a, b;
a = (b = 5);
}}

@3 Операція присвоєння правоасоціативна, тому дужки можна опустити:
{{
a = b = 5;
}}

@2 Послідовність команд (блок)
Послідовні+ команд;блок+;блоці
@4 {
   команда
   команда
   ...
   команда
}

@3 У мові С# прийнята блокова область видимості.

@2 Умовна команда
@@  умовн+ команд+

@4
if (умова)
    команда
[else
    команда]

@6 Сторони Трикутника | 118

@2 Цикли
@@ while|do-while|for|foreach|var

@3 Цикл {while}
{{
int i = 0;
while (i < 10)
{
    Console.Write(i);
    i += 1;
}
}}

@3 Цикл {do-while}.
{{
int i = 0;
do {
    Console.Write(i);
    i += 1;
} while (i < 10)
}}
Цикл do-while виконується щонайменше одного разу.

@3 Цикл {for}
{{
for (int i = 0; i < 10; i++)
{
    Console.Write(i);
}
}}

@3 Цикл {foreach}
Деякі послідовності дозволяють відвідувати елементи, з яких складаються.
Докладніше про цикл foreach буде пізніше.
{{
foreach (var x in "123" )
{
   Console.WriteLine(x);
}
}}

@3 Слово var застосовують замість імені типу тоді,
коли компілятор здатен самостіно вивести змінної тип з її оточення.

@6 Звести в Ступінь | 119

