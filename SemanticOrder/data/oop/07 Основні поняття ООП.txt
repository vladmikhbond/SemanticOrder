@1 07 Основні поняття ООП

@2 Ідея ООП
@@ внутрішн+ стан+|поведін+|повідомленн+

@3 Ідея ООП в тому, що виконання програми не є результатом роботи єдиного обчислювача,
а продукт спільної діяльності багатьох "організмів".

@3 [[robots.png]]
Кожен організм має внутрішній стан і здатен виконувати обмежений набір команд.

@3 Кожен організм належить до певного класу організмів.
Клас визначає всі якості організмів, що до нього належать.

@3 У процесі роботи організми обмінюються повідомленнями.

@3 Робота програміста зводиться до опису необхідних класів організмів та встановлення зв'язку між організмами.

@3 Таку точку зору на програмування висловив Аллан Кей, біолог за першою освітою.
[[AllanKey.png]]

@2 Мова Smalltalk
@@ Smalltalk

@3 У 70-х роках минулого століття Аллан Кей запропонував мову Smalltalk, повністю засновану на такій точці зору.

@3 Наприклад,
{{
42 factorial
}}
означає, що повідомлення без параметрів factorial надсилається виконавцю {42}.

@3 Виконавець відповідає на повідомлення, повертаючи об'єкт, який можна присвоїти змінній.
{{
aBigNumber := 42 factorial
}}

@3 Щоб до 8 додати 2, потрібно надіслати об'єкту {8} повідомлення {+} з параметром {2}.
Відповідь, отриману від об'єкта 8, можна зберегти у змінній x.
{{
x := 8 + 2
}}

@3 Відповідь на повідомлення - це новий об'єкт, якому також можна надсилати повідомлення.
{{
y := 8 + 2 * 3
}}
У результаті змінна y зберігає число 30 (а не 14).

@2 Мова Simula
@@ Simula

@3 Smalltalk зробив ООП відомим , але вперше принципи ООП були втілені в мові {Simula-67}.

@3 Мова Simula призначалася для симуляції ситуацій,
у яких об'єкти взаємодіють один з одним.
Наприклад, судна швартуються до причалів, 
посилки обробляються у поштовому відділенні, 
люди замовляють та викуповують квитки, тощо.

@3 Simula = SIMULAation
[[LanguageDerivation.png]]

@3 [[Nygaard_Daal.png]]
За розробку мови Simula Крістен Нігорд (ліворуч) та Оле-Йохан Дал були удостоєні премії Тьюринга.

@3 У сучасних мовах, таких як C#:
Клас – тип.
Організм – об'єкт (екземпляр класу).
Стан організму – сукупність полів об'єкта.
Поведінка – сукупність методів об'єкта.
Народження організму – конструювання об'єкта.
Надсилання повідомлення - виклик методу об'єкта.
Відповідь на повідомлення - те, що повертає метод.

@2 Приклад класу - Turtle
@@ private

@3 Черепаха має координати (x, y) і пересувається екраном у напрямі direct: 
вгору - 'u', вниз - 'd', вліво - 'l', вправо - 'r'.
{{
class Turtle
{
    int x, y;
    char direct; //'u', 'd', 'r', 'l'

    public Turtle(int x=0, int y=0, char d='r')
    {
        this.x = x;
        this.y = y;
        direct = d;
    }
}
}}

@3 Конструюють екземпляри класу так само, як екземпляри структури.
{{
Turtle Turtle = new Turtle ();
}}

@3 Стан черепахи складається з поточних координат (поля x та y) та напряму руху (поле direct).

@3 Поведінка черепахи полягає в тому, що вона вміє робити один крок у поточному напрямку.
{{
public void Step() {
   if (direct == 'u')
      y -= 1;
   else if (direct == 'd')
      y += 1;
   else if (direct == 'r')
      x += 1;
   else if (direct == 'l')
      x -= 1;
}
}}

@3 Слово public перед полем або методом означає, що поле або метод будуть доступні клієнтам класу.
Слово private перед полем або методом означає, що останні доступні лише в межах визначення класу.
Відсутність слова означає те ж саме, що private.
{{
   Turtle Turtle = new Turtle();
   turtle.Step(); // правильно
   turtle.x = 5; // помилка
}}

@3 Відкриті (public) поля прийнято називати з великої літери, закриті (private) - з малої.
{{
public void SetDir(char d) {
    this.direct = d;
}
}}

@3 Перша відмінність класу від структури у тому, що клас посилальний тип, а структура значущий.

@2 Завдання

@6 Поворот Черепахи | 689
@6 Черепаха Задкує | 690
@6 Дві Окружності | 165
@6 Прямокутник | 166
@6 Прямокутник і Точка | 164
@6 Вставка в Рядок | 162
@@ 6 Додавання до Рядку | 161
@@ 6 Конструктори Змінюваного Рядки | 160
@@ 6 Видалення з Рядки | 163