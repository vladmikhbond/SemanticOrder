@1 38 Хеш-таблиці 

@2 Як влаштована хеш-таблиця
@@ хеш-таблиц+|хеш-функці+

@3 Хеш-таблиця містить пари (ключ, значення).

@3 Місце пари у таблиці визначається хеш-функцією.
Хеш-функція відображає простір ключів на простір адрес таблиці.

@3 Приклад хеш-таблиці, де ключем є ідентифікаційний код, а значенням - прізвище.
Хеш-функція повертає молодший розряд ідентифікаційного коду
{{key => parseInt(key) % 10}}
{{
0 213..10 Іванов
1
2
3
4
5
6
}}

@3 Додаємо Сидорова і Петрова.
{{
0 213..10 Іванов
1
2
3 345..23 Петров
4
5 765..55 Сидорів
6
}}

@3 Додаємо Васильєва.
{{
0 213..10 Іванов
1 548..20 Васильєв
2
3 345..23 Петров
4
5 765..55 Сидорів
6
}}

@3 Додаємо Семенова.
{{
0 213..10 Іванов
1 548..20 Васильєв
2
3 345..23 Петров
4 981..53 Семенов
5 765..55 Сидорів
6
}}

@3 Видаляємо Іванова.
{{
0 -1 Іванов (віддалений)
1 548..20 Васильєв
2
3 345..23 Петров
4 981..53 Семенов
5 765..55 Сидорів
6
}}

@3 Видалення "м'яке", тобто елемент не видаляється, а тільки позначається як видалений.

@3 {Алгоритм запису}
1) хешувати ключ та в результаті отримати адресу;
2) якщо комірка за цією адресою вільна, записати в неї пару (ключ, значення);
3) якщо комірка зайнята, рехешувати ключ і повторити спробу запису.

@3 {Алгоритм читання}
1) хешувати ключ та в результаті отримати адресу;
2) якщо комірка за цією адресою вільна, потрібного значення в таблиці немає;
3) якщо в комірці знаходиться шуканий ключ, прочитати значення;
4) якщо в комірці інший ключ, рехешувати ключ і повторити спробу читання.

@3 У ролі хеш-таблиці може виступити масив пов'язаних списків.


@2 Метод GetHashCode()
@@ GetHashCode

@3 У класі Object є метод GetHashCode(), завдяки якому будь-який тип може слугувати ключем у хеш-таблицях.
{{
Console.WriteLine(new object().GetHashCode());
Console.WriteLine(25.GetHashCode());
Console.WriteLine("123".GetHashCode());
}}

@3 Для правильної роботи хеш-таблиць еквівалентні ключі повинні мати однакові хеш-коди.
{{
Console.WriteLine("123".GetHashCode());
Console.WriteLine(("12"+"3").GetHashCode());
}}

@3 Для ефективної роботи хеш-таблиць ключі повинні рівномірно розсіюватися у просторі адрес.

@2 Інші колекції
@@ SortedDictionary|SortedSet|Stack|Queue

@3 Крім Dictionary, у просторі імен System.Collections.Generic
є клас SortedDictionary, що реалізується деревом.

@3 Є також:
{{
SortedSet<T> // впорядкована множина
LinkedList<T> // пов'язаний список
Stack<T> // стек
Queue <T> // черга
}}

@2 Завдання

@6 Ключ Point | 215
@6 Реалізація Черги | 219
@6 Реалізація Стека | 218
@6 Частотний Словник | 214
@6 Еквівалентність Узагальнених Колекцій | 217