@1 07 Основные понятия ООП

@3 Идея ООП в том, что исполнение программы не результат работы одного вычислительного устройства, 
а продукт совместной деятельности сообщества организмов. 

@3 [[robots.png]]
Каждый организм имеет внутреннее состояние и способен исполнять ограниченный набор команд.

@3 Каждый организм относится к определенному классу организмов. 
Класс определяет все свойства относящихся к нему организмов. 

@3 В процессе работы организмы обмениваются сообщениями друг с другом.

@3 Работа программиста сводится к описанию необходимых классов организмов и установлению связей между организмами.

@3 Такую точку зрения на программирование высказал Аллан Кей.
[[AllanKey.png]]

@2 Язык Smalltalk

@3 В 70-х годах прошлого века Аллан Кей предложил язык {Smalltalk}, целиком основанный на этой точке зрения.

@3 Например, 
{{
42 factorial 
}}
означает, что сообщение без параметров {factorial} посылается исполнителю {42}. 

@3 Исполнитель отвечает на сообщение, возвращая объект, который можно присвоить переменной.
{{
aBigNumber := 42 factorial
}}
[[fake: А почему не наоборот, factorial исполнитель, а 42 сообщение ?]]

@3 Чтобы  к 8 прибавить 2, нужно послать объекту {8} сообщение {+} с параметром {2}.
Ответ, полученный от объекта 8, сохраняется в переменной x.
{{ 
x := 8 + 2 
}}

@3 Ответ на сообщение - это новый объект, которому также можно послать сообщение.
{{
y := 8 + 2 * 3
}}
В итоге y обозначает число 30, а не 14.

@2 Язык Simula

@3 Smalltalk сделал ООП популярным, но впервые принципы ООП были воплощены в языке {Simula-67}.

@3 Язык Simula предназначался для моделирования ситуаций, 
в которых объекты взаимодействуют друг с другом.
Например, суда швартуются к причалам, посылки обрабатываются в почтовом отделении, люди заказывают и выкупают билеты и т.п.

@3 Simula = SIMULAation
[[LanguageDerivation.png]]

@3 [[Nygaard_Daal.png]]
За разработку языка Simula Кристен Нигорд (слева) и Оле-Йохан Дал были удостоены премии Тьюринга.

@3 В процедурных языках:
Класс - тип.
Организм - объект (экземпляр типа).
Состояние организма - поля объекта.
Поведение - методы объекта.
Рождение организма - конструирование объекта заданного типа.
Посылка сообщения - вызов метода объекта.
Ответ на сообщение - возврат значения из метода.

@2 Пример класса - Turtle 

@3 Черепаха имеет координаты (x, y) и передвигается по экрану в направлении direct: вверх, вниз, влево, вправо.
{{
class Turtle
{        
    int x, y;
    char direct;  //'u', 'd', 'r', 'l'

    public Turtle(int x=0, int y=0, char d='r')
    {
        this.x = x;
        this.y = y;
        direct = d;
    }
}   
}}

@3 Конструируют экземпляры класса так же, как экземпляры структуры. 
{{ 
Turtle turtle = new Turtle();  
}}

@3 Поведение черепахи заключается в том, что она умеет делать шаг в текущем направлении.   
{{
public void Step() {
   if (direct == 'u')
      y -= 1;
   else if (direct == 'd')
      y += 1;
   else if (direct == 'r')
      x += 1;
   else if (direct == 'l')
      x -= 1;         
}   
}}

@3 Слово  public перед полем или методом означает, что поле или метод будут доступны и за пределами объявления класса. 
{{
   Turtle turtle = new Turtle(); 
   turtle.Step();   // правильно 
   turtle.x = 5;    // ошибка
}}

@3 Открытые (public) поля принято именовать с прописной буквы, закрытые (private) - со строчной. 
{{
public void SetDir(char d) {
    this.direct = d;
}     
}}

@3 Главное отличие класса от структуры в том, что класс это ссылочный тип, а структура - значимый.

@2 Задачи

@6 Поворот Черепахи  | 689
@6 Черепаха Пятится  | 690
@6 Две Окружности | 165
@6 Прямоугольник | 166
@6 Прямоугольник и Точка | 164
@6 Вставка в Строку | 162
@@ 6 Добавление к Строке | 161
@@ 6 Конструкторы Изменяемой Строки | 160
@@ 6 Удаление из Строки | 163



