@1 02 Конструкции управления

@2 Система типов

@3 Значимые типы (value types) компактно хранятся в памяти,
ссылочные типы (reference types) - хранятся разделённо.
[[cs-type-system.jpg]]

@2 Присваивание

@4 имя = выражение;

@3 Типы левой и правой части присваивания должны совпадать. 

@3 Если типы не совпадают, иногда можно преобразовать тип, явно (explicit) или неявно (implicit). 
{{
int  i = 5;
long l = 555555555555555;

i = (int)l;   
l = i;   
}}

@3 В C# точка с запятой является терминатором, а не сепаратором.

@3 Цепочечное присваивание 
{{
int a, b;
a = (b = 5);  
}}

@3 Операция присваивания правоассоциативна, поэтому скобки можно опустить: 
{{ 
a = b = 5; 
}}

@2 Составной оператор (блок)

@4 {
   оператор
   оператор
   ... 
   оператор
}

@3 В С# существует блочная область видимости.

@2 Условный оператор

@4 
if (условие)
    оператор
[else
    оператор] 

@6 Стороны Треугольника  | 118

@2 Операторы цикла

@3 Цикл {while}
{{
int i = 0;
while (i < 10) 
{
    Console.Write(i);
    i += 1;
}  
}}

@3 Цикл {do-while}. 
{{
int i = 0;
do {
    Console.Write(i);
    i += 1;
} while (i < 10)  
}}
Цикл do-while выполняется по меньшей мере однажды.

@3 Цикл {for}   
{{
for (int i = 0; i < 10; i++) 
{
    Console.Write(i);
} 
}}

@3 Цикл {foreach}   
{{
foreach (char c in "abcdef") 
{
    Console.Write(c);
} 
}}

@6 Возвести в Степень  | 119

@2 Функции

@3 Статические методы - это функции, объявленные внутри объявления класса.    
{{
class C {
    static int Summa(int x, int y) 
    {
         return x + y;
    }
}    
}}

[[fake:A в С# есть процедуры?]]

@3 Если возвращать значение не требуется, пишем {void}. 
{{
static void Print(int x) 
{
   Console.WriteLine(x);
}  
}}

@2 Задачи

@6 Знакопеременная Сумма  | 121
@6 Сложить Нечетные Числа  | 122
@6 Число Разрядов  | 123
@6 Факториал  | 125
@6 Ряд Синуса  | 127
@6 Сумма Дробей  | 128
@6 Цепная Дробь  | 129
@6 Сумма Уникальных Дробей  | 130
