@1 53 LINQ. Групування та з'єднання

@2 Запит SelectMany
@@ SelectMany

@3 Виробляє послідовність послідовностей, а потім робить її однорівневою.

@3 Приклад. Дана послідовність чисел. Вибудувати з цифр всіх чисел єдину послідовність.
{{
int[] ns = {12, 34, 56};
var result = ns.SelectMany(n => n.ToString());

foreach(var x in result)
    Console.WriteLine(x);
}}

@3 Приклад. Даний двомірний невирівняний масив, наприклад,
{{
int[][] m = { new int[]{ 1, 2, 3 }, new int[] { 4 }, new int[] { 5, 6 } };
}} Зібрати його елементи в одномірний масив int n[].
{{
var result = a2.SelectMany(x => x);
}}

@2 Запит GroupBy
@@ GroupBy|IGrouping

@3 Здійснює групування елементів вхідної послідовності.
На виході - послідовність послідовностей IGrouping з додатковою властивістю Key.

@3 Приклад: згрупувати рядки за довжиною.
{{
string[] ss = {"SELECT", "FROM", "WHERE", "ORDER BY"};
var res = ss.GroupBy(s => s.Length);

foreach (IGrouping<int, string> gr in res)
{
    Console.WriteLine($"Strings of length {gr.Key}");
    foreach (string s in gr)
        Console.WriteLine(s + "");
}
}}

@3 Запит GroupBy може не тільки згрупувати дані, але й виконати їхню проекцію.
Вираз проекції задається у другому параметрі запиту.
{{
   var result = input.GroupBy(s => s.Length, s => s.ToLower());
}}


@2 Запит Join
@@ Join|з'єднанн+

@3 Join з'єднує дві вхідні послідовності до третьої,
але з основі повного декартова твори, але в основі тих пар, котрим ключі елементів збігаються.
Параметри запиту Join:
1) перша послідовність,
2) друга послідовність,
3) функція для першого ключа,
4) функція для другого ключа,
5) функція для проекції.

@3 Приклад. Є два масиви імен.
{{
string[] boys = {"Alex", "Bob", "Charley", "Dick"};
string[] girls = {"Caroline", "Barbara", "Ann", "Adel"};
}}
Утворити пари, в яких початкові літери імен збігаються.
{{
var result = boys.Join(girls,
        b => b[0],
        g => g[0],
        (b, g) => new {Boy = b, Girl = g} );
}}

@2 Запит GroupJoin
@@ GroupJoin

@3 Відрізняється від Join тим, що пара складається з елемента першої послідовності і всіх відповідних йому елементів другої послідовності.
{{
var result = boys.GroupJoin(girls,
    b => b[0],
    g => g[0],
    (b, gs) => new { Boy = b, Girls = gs });

   foreach (var r in result) {
      Console.WriteLine(r.Boy);
      foreach (var g in r.Girls) {
         Console.WriteLine(" " + g);
      }
   }
}}
 
@2 Завдання

@6 Книги з Декадів | 365
@6 Читачі та Книги | 366
@6 Суворі Читачі | 367