@1 14 Гра Хрестики-Нулики

@2 Умови гри
@@ -

@3 Гра іде на полі 10х10. 
Гравці ходять по черзі. 
Виграє той, хто першим поставить 5 своїх позначок підряд по вертикалі, горизонталі або діагоналі.
Першими ходять хрестики.

@3 {Основний сценарій}
   
На екрані відображується поточне поле гри.
Перший гравець робить хід.
Програма перевіряє коректність - хід коректний.
Програма зараховує хід і перевіряє стан гри - гра не закінчена.

Те ж саме повторюється для другого гравця.

@3 {Додаткові сценарії}

Програма перевіряє коректність - хід не коректний.
Програма пропонує гравцю зробити інший хід.

Програма перевіряє стан гри - гра закінчена.
Основний цикл розривається.
Програма сповіщає про результат.

@3 Реалізуємо гру в архітектурі консольного застосування на платформі .NET 6.


@2 Модель
@@ модел+

@3 Програма складається з класів. Кожен клас програми має відповідати за щось одне.
Класи моделі відповідають за логіку гри, незалежно від того, 
як саме бачать гру гравці і яким способом вони роблять свої ходи.

@3 Моделлю гри буде квадратне поле, яке складається з окремих комірок.
Комірка може зберігати хрестик, або нулик, або бути вільною. 
Стан комірки буде відображувати окремий тип - enum 
{{
public enum CellState { Empty, Cross, Zero};
}}

@3 Перелічуваний тип даних (або перелік) - тип даних що складається з множини іменованих значень.
В мові C# ці значення - цілі числа.
Переваги переліків в додатковому контролю типів та виразності програмного коду.

@3 Модель гри буде втілювати клас Model.
{{
public enum CellState { Empty, Cross, Zero };

public class Model
{
   public int Size { private set; get; }

   CellState[] cells;
   int winLen;

   public Model(int size, int winLen=5)
   {
      Size = size;
      this.winLen = winLen;
      cells = new CellState[Size * Size];
      Array.Fill(cells, CellState.Empty);
   }

   public CellState this[int r, int c]
   {
      set { cells[r * Size + c] = value; } 
      get { return cells[r * Size + c]; }
   }

   internal void Turn(string turnStr, CellState state)
   {
      // just stub
      if (state == CellState.Cross) 
         this[0, 0] = state;
      else
         this[1, 1] = state;
   }
}
}}

@3 В програмі поле можна було б представити двомірним масивом, 
але набагато зручніше мати справу з масивом звичайним.
Тому скористаємося одномірним масивом, але приховаємо його за індексатором.

@3 Метод Turn зараз програмувати не будемо, а замінимо заглушкою.


@2 Вигляд ( або уявлення)
@@ вигляд+

@3 За вигляд буде відповідати клас View.
Вигляд зображує модель, тому залежить від неї.
Залежності краще за все вводити через конструктор, так їх легше відстежувати
і навіть автоматизувати таке відстежування.
{{
public class View
{
   Model model;

   public View(Model model)
   {
      this.model = model;
   }

   public void Show()
   {
      Console.Clear();
      for (int r = 0; r < model.Size; r++)
      {
         //Console.Write(" " + r);
         for (int c = 0; c < model.Size; c++)
         {
            if (model[r, c] == CellState.Cross)
               Console.Write(" X");
            else if (model[r, c] == CellState.Zero)
               Console.Write(" O");
            else
               Console.Write(" .");
         }
         Console.WriteLine();
      }
   }
}
}}

@2 Контролер

@3 Окремою задачею є отримання команд від користувача
і перетворення їх на виклик методів моделі та вигляду.
Цю задачу доручають контролеру.

@3 В консольному застосуванні основу контролеру становить нескінченний цикл,
в якому дії користувача трансформуються у виклики методів.
{{
public class Controller
{
   Model model;
   View view;

   public Controller(Model model, View view)
   {
      this.model = model;
      this.view = view;
   }

   public void Run()
   {         
      while (true)
      {
         view.Show();
         Console.Write("Cross turn > ");
         string turnStr = Console.ReadLine();
         model.Turn(turnStr, CellState.Cross);

         view.Show();
         Console.Write("Zero turn > ");
         turnStr = Console.ReadLine();
         model.Turn(turnStr, CellState.Zero);
      }
   }
}
}}

@3 В головній програмі збираємо все до купи.
і запускаємо метод Run().
{{
using OopCrossZero0;

Model model = new Model(6, 2);
View view = new View(model);
Controller controller = new Controller(model, view);

controller.Run();
}}

@2 Шаблон MVC
@@ MVC

@3 Розподілення відповідальності між класам, яке ми впровадили, не випадкове,
воно відповідає архітектурному шаблону модель–вигляд–контролер,
запропонованому ще в 70-х роках минулого сторіччя.
[[https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller]]

