@1 36 [Связанные списки]

@3 В основу коллекции может быть положен не массив, а связанный список.
[[LinkedList.png]]

@3 Каждое хранимое значение Value заключается в экземпляр ListNode. 
{{
class ListNode<T>
{
    public T Value;
    public ListNode<T> Next;

    public ListNode(T value, ListNode<T> next)
    {
        Value = value;
        Next = next;
    }
}    
}}

@3 Класс коллекции:
{{
class MyList<T>
{
    public ListNode<T> Head { get; private set; }

    public void Add(T value)
    {
        Head = new ListNode<T>(value, Head);
    }
    // ToString,  Remove(value), ...
}
}}

@3 Метод ToString()
{{
public override string ToString()
{
    string s = "";
    for (var t = Head; t != null; t = t.Next)
        s += $"{t.Value}  ";
    return s.Trim();
}
}}

@3 Метод Remove() - удаляет голову списка
{{
public void Remove()
{
    Head = Head?.Next;
}
}}

@3 Метод Find(T val) 
{{
public ListNode<T> Find(T val)
{
    for (var t = Head; t != null; t = t.Next)
        if (Equals(t.Value, val))
            return t;
    return null;
}
}}

@6 Метод MyList.Remove | 932 

@2 C#7. Возврат значения по ссылке

@3 В C#7 ссылочным может быть не только параметр функции, но и возвращаемое значение.
{{
// возвращает не узел, а значение в нем
public ref T FindValue(T val)
{
    var node = Find(val);
    return ref node.Value;
}

// вызов метода
var list = new MyList<int>();
list.Add(3); list.Add(2); list.Add(1);
ref int x = ref list.FindValue(2);
x = 222;
Console.WriteLine(list);
}}

@2 Другие списки

@3 С указателем на последний элемент
[[lists1.png]]

@3 Циклический
[[lists2.png]]

@2 Библиотечная коллекция LinkedList<T>

@3 В основу коллекции LinkedList положен двунаправленный список.
[[lists3.png]]

@3 Каждый элемент хранимых данных погружается в объект {LinkedListNode <T>}. 
{{
public sealed class LinkedListNode<T>
{
    public T Value { get; set; }
    public LinkedListNode<T> Next { get; }
    public LinkedListNode<T> Previous { get; }
    public LinkedList<T> List { get; }
}
}}

@3 Класс коллекции LinkedList не реализует интерфейс {IList<T>}.

@2 Временная сложность операций

@3 {{
{Операция}             {Массив}    {Список}
Пополнение              O(1)       O(1)
Селекция по индексу     O(1)       O(n)
Вставка                 O(n)       O(1)
Удаление                O(n)       O(1)
Поиск по значению       O(n)       O(n)
}}


@2 Задачи

@6 Циклическая Последовательность | 311 
@6 Циклическую Последовательность в Строку | 312 
