@1 04 Нечислові типи даних

@2 Тип bool
@@ xor| ^ |
@3 Літерали - {false}, {true}.

@3 Логічні операції:
{&&} - and
{||} - or
{!} - not
{^} - xor.

@3 Логічні вирази обчислюються за короткою схемою.
{{
if (i < m.Length && m[i] == 5) . . .

if (x != 0 && y/x > 1) . . .
}}

@3 Оператори {&} та {|} означають повне обчислення логічного виразу.

@3 По відношенню до цілого числа оператори {&}, {|} і {~} означають побітові операції.

@ 5? | Як записати вираз, протилежний { !a && !b } ?
{{ !(!a && !b) }}
{{a || b }}

@2 Тип char
@@ char

@3 У мові C# окремі символи представлені типом {char}.

@3 Символьні константи полягають у одинарних лапках:
{{'а', 'B'}}

@3 Зворотний слеш у константах служить для позначення символів, що управляють:
{{
'\n', '\r', '\t', '\\'
}}

@3 Для позначення всіх без винятку символів застосовують 16-річні числа, 
наприклад, '\u0041' це латинська прописна літера "А".

@3 Код програм на C# представлений в кодуванні UTF-16, тобто. два байти на символ. 
Це означає, що у коді можливі символи національних алфавітів.
{{
int один = 1;
}}

@2 Введення символів з клавіатури 
@@ Console.Read|Console.ReadKey|Encoding

@3 Введення одного символу
{{
char c = (char) System.Console.Read ();
}}
Метод Read() читає символ із буфера клавіатури. У буфер дані потрапляють лише після натискання клавіші Enter.

@3 Негайне введення символів виконує метод ReadKey():
{{
    for(;;)
    {
         char c = Console.ReadKey(true).KeyChar;
         Console.WriteLine("Введений символ" + c + "код =" + (int)c);
    }
}}

@3 Може знадобитися явно вказати кодування.
{{
Console.OutputEncoding = Encoding.UTF8;
}}

@2 Кодування ASCII
@@ ASCII

@3 Кодування ASCII – 7-бітове кодування для представлення латинського алфавіту, десяткових цифр,
деяких розділових знаків, арифметичних операцій та керуючих символів (всього 128 символів).
[[ASCIIcodes.png]]
Символи з 0 по 1F призначалися керувати пристроями вводу-вывода.

@3 [[Bemer.png]]
Роберт Бемер – батько ASCII

@2 Кодування Unicode
@@ Unicode|UTF-8|UTF-16

@3 У 1991 р. громадська організація Unicode Consortium (до неї увійшли провідні виробники комп'ютерів та ПЗ) запропонувала стандарт кодування Unicode.
[[unicode.png]]

@3 У Юнікоді перші 128 символів збігаються з відповідними символами ASCII.

@3 Юнікод підтримує кілька способів перетворення символів на байти: UTF-8, UTF-16 і UTF-32.

@2 UTF-8
@@ -

@3 У тексті, збереженому у форматі UTF-8, будь-який байт зі значенням менше 128 зображує символ ASCII з тим самим кодом.

@3 Інші символи Юнікоду зображуються послідовностями довжиною від 2 до 4 байтів, у яких перший байт завжди починається з 11, а решта з 10.
{{
0x00000000 - 0x0000007F: 0xxxxxxx
0x00000080 - 0x000007FF: 110xxxxx 10xxxxxx
0x00000800 - 0x0000FFFF: 1110xxxx 10xxxxxx 10xxxxxx
0x00010000 - 0x001FFFFF: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
}}

@3 Кількість одиниць у префіксі першого байта показує, скільки наступних байтів кодують символ.

@2 Типи, що допускають null
@@ null

@3 null - поліморфне значення, яке можна присвоїти посилальній змінній будь-якого типу.
null означає, що змінна ні на що свідоме не посилається.
Зовні безневинне null становить джерело багатьох помилок часу виконання.

@3 В нормі тільки типи посилань допускають значення null.
Але будь-який значимий тип можна модифікувати так, щоб він допускав значення null.
{{
int? x = null;
}}

@2 Завдання

@6 Пошук Речовини | 148
@6 Дробне Двійкове | 150