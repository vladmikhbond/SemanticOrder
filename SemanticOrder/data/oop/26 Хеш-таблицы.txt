@1 26 Хеш-таблицы

@3 Хеш-таблица содержит пары (ключ, значение). 
Место пары в таблице определяется хеш-функцией.

@3 Xеш-функция отображает пространство ключей на пространство адресов таблицы.

@3 Пример хеш-таблицы, где ключом служит идентификационный код, а значением - фамилия. 
Хеш-функция возвращает младший разряд идентификационного кода
key {=>} parseInt(key) % 10
{{
0   213..10  Иванов
1
2
3  
4
5   
6
}}

@3 Добавляем Сидорова и Петрова. 
{{
0   213..10  Иванов
1
2
3   345..23  Петров
4
5   765..55  Сидоров
6
}}

@3 Добавляем Васильева. 
{{
0   213..10  Иванов
1   548..20  Васильев 
2
3   345..23  Петров
4
5   765..55  Сидоров
6
}}

@3 Добавляем Семенова.
{{
0   213..10  Иванов
1   548..20  Васильев 
2
3   345..23  Петров
4   981..53  Семенов
5   765..55  Сидоров
6
}}

@3 Удаляем Иванова.
{{
0        -1  Иванов    (удален)
1   548..20  Васильев 
2
3   345..23  Петров
4   981..53  Семенов
5   765..55  Сидоров
6
}}

@3 Удаление "мягкое", т.е. элемент не удаляется, а помечается как удаленный.

@3 {Алгоритм записи}
1) хешировать ключ и в результате получить адрес;
2) если ячейка по этому адресу свободна, записать в нее пару (ключ, значение);
3) если ячейка занята, рехешировать ключ и повторить попытку записи.

@3 {Алгоритм чтения}
1) хешировать ключ и в результате получить адрес;
2) если ячейка по этому адресу свободна, нужного значения в таблице нет;
3) если в ячейке находится искомый ключ, прочитать значение;
4) если в ячейке другой ключ, рехешировать ключ и повторить попытку чтения.

@3 В роли хеш-таблицы может выступить массив связанных списков.

@2 Пример: Частотный словарь

@3 Задан текст в виде коллекции слов. Составить для него частотный словарь.
{{
private static Dictionary<string, int> FreqDict(ICollection<string> words)
{
  var dict = new Dictionary<string, int>();

  foreach (string word in words)
  {
      if (dict.ContainsKey(word))
          dict[word]++;
      else
          dict[word] = 1;
  }
  return dict;
}
}}

@2 Метод GetHashCode()

@3 В классе Object есть метод GetHashCode(), благодаря которому любой тип может служить ключом в хеш-таблицах. 
{{
Console.WriteLine(new object().GetHashCode());
Console.WriteLine(25.GetHashCode());
Console.WriteLine("123".GetHashCode()); 
}}

@3 Для правильной работы хеш-таблиц эквивалентные ключи обязаны иметь одинаковые хеш-коды. 
{{
Console.WriteLine("123".GetHashCode());
Console.WriteLine(("12"+"3").GetHashCode());  
}}

@3 Для эффективной работы хеш-таблиц ключи должны равномерно рассеиваться по пространству адресов. 

@2 Другие коллекции

@3 Помимо Dictionary, в пространстве имен System.Collections.Generic 
есть класс SortedDictionary, который реализуется деревом.

@3 Есть также:
{{
SortedSet<T>       // упорядоченное множество   
LinkedList<T>      // связанный список
Stack<T>           // стек
Queue<T>           // очередь
}}

@2 Задачи

@6 Ключ Point | 215
@6 Реализация Очереди | 219
@6 Реализация Стека |	218
@6 Частотный Словарь | 214
@6 Эквивалентность Обобщенных Коллекций | 217

