@1 111 Статичні методи та класи 

@2 Статичні члени класу
@@ static

@3 Треба розрізняти поля, які належать класу та поля, які належать екземпляру класу.
Те ж саме відноситься до методів, властивостей і конструкторів 
Щоб запобігти плутанини перші називають статичними полями, методами, властивостями, конструкторами.

@@ @3 Різниця стане ясною, якщо думати про клас як про окремий об'єкт, який може мати власні поля та все інше.
@@ Для кожного класу створюється один такий об'єкт в той момент, коли клас завантажується в пам'ять.

@3 Суто для експериментів оголосимо клас C, 
в якому визначимо по парі усіх членів класу.
{{
class C
{
   // Fields
   public int Value;  
   
   public static int StaticValue;

   // Ctors
   public C(int v) { Value = v; }

   static C() { StaticValue = 10; }

   // Methods
   public void Print()
   {
      Console.WriteLine((Value, StaticValue));
   }

   public static void StaticPrint()
   {
      Console.WriteLine(StaticValue);
   }

}
}}

@3 Поля.
Кожен екземпляр класу має власний комплект полів екземпляру.
Комплект статичних полів єдиний і поділяється усіма екземплярами.
{{
C c1 = new C(1);
C c2 = new C(2);

c1.Print();
c2.Print();
}}

@3 Конструктори
Статичний конструктор спрацьовує автоматично, коли клас вперше завантажується в пам'ять.
Статичний конструктор не має параметрів і не дозволяє вказувати рівень доступу.
Використовується для ініціалізації статичних полів, зустрічається рідко.

@3 Методи
На відміну від полів методи існують в одному екземплярі незалежно від того, статичні вони, чи ні.
Різниця в тому, що статичні методи не мають доступу до нестатичних полів чи методів
і для їх виклику не потрібен екземпляр класу.
{{
C.StaticPrint();
}}
Природно, що посилання this не має сенсу в тілі статичних методів.


@3 {Статичні класи} - такі класи, у яких всі члени статичні.
Такі класи мають кваліфікатор static.
Призначення статичних класів - бути збірками корисних функцій.