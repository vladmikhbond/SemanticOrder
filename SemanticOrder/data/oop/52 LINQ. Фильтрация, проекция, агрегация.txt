@1 52 LINQ. Фільтрація, проекція, агрегація
 
@2 Запит Where - фільтр
@@ -

@3 Приклад: залишити в числовій послідовності лише парні числа.
{{
int[] ns = { 11, 22, 30, 45, 50};

var res = ns.Where(n => n % 2 == 0);
}}

@3 Приклад: залишити тільки ті числа, що стоять на парних місцях.
{{
var res = ns.Where((n, i) => i % 2 == 0);
}}

@3 Реалізуємо запит Where самостійно.
{{
public static IEnumerable<T> Where<T>(this IEnumerable<T> source, Func<T, bool> predicate)
{
    foreach (var x in source)
        if (predicate(x))
            yield return x;
}
}}

@3 Where на Гітхабі
[[https://github.com/dotnet/corefx/blob/master/src/System.Linq/src/System/Linq/Where.cs]]

@2 Запит Select
@@ Select

@3 Select відображає один тип даних на інший.

@3 Приклад. Дана послідовність рядків. Отримати послідовність їх довжин.
{{
string[] ss = {"SELECT", "FROM", "WHERE", "ORDER BY"};

var ls = ss.Select(s => s.Length);
}}

@3 Приклад. Дана послідовність чисел. Збільшити кожне число послідовності у 1000 разів.
{{
var ms = ns.Select (s => s * 1000);
}}

@3 Цільовий тип даних можна сконструювати "на льоту".
Він буде анонімним (що саме і викликало необхідність у слові var).

@3 Реалізуємо запит Select самостійно.
{{
IEnimerable<Tr> Select<T, Tr> (this IEnimerable<T> source, Func <T, Tr> f)
{
   foreach (var x in source)
      yield return f(x);
}
}}

@2 Запити агрегації
@@ Aggregate|згортк+

@3 Агрегація "згортає" послідовність у якесь одне значення.
Згортка потребує три параметри:
1) вхідна послідовність,
2) початкове значення акумулятора,
3) функція, яка приєднує до акумулятора ще один елемент послідовності.
{{
public static A Aggregate<T, A>(
    this IEnumerable<T> source,
    A seed,
    Func<A, T, A> func)
}}

@3 Приклад. Знайти добуток чисел із вхідної послідовності.
{{
int res = ns.Aggregate(1, (a, x) => a * x);
}}

@3 Перевантаження згортки:
{{
T Aggregate<T>
Aggregate<T, A>
R Aggregate<T, A, R>
}}

@3 Окремі випадки агрегації: Sum, Average, Max, Min.

@3 Запити Count(), Count(pred) - також агрегація.

@2 Завдання

@6 Скільки книг | 362
@6 Старші Читачі | 363
@6 Наймолодші | 364
@@ @6 Середні Оцінки Книг | 368
