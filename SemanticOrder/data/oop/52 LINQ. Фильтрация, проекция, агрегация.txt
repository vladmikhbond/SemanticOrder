@1 52 LINQ. Фильтрация, проекция, агрегация
 
@2 Запрос Where - фильтр

@3 Пример: оставить в числовой последовательности ns только четные числа. 
{{
int[] ns = { 11, 22, 30, 45, 50 };

var res = ns.Where(n => n % 2 == 0);    
}}

@3 Пример: оставить только числа, стоящие на четных местах  
{{
var res = ns.Where((n, i) => i % 2 == 0);    
}}

@3 Реализуем запрос Where самостоятельно.
{{
public static IEnumerable<T> Where<T>(this IEnumerable<T> source, Func<T, bool> predicate)   
{
    foreach (var x in source)
        if (predicate(x))
            yield return x;
}      
}}

@3 Where на гитхабе
[[https://github.com/dotnet/corefx/blob/master/src/System.Linq/src/System/Linq/Where.cs]]

@2 Запрос Select

@3 Select выполняет отображение одного типа данных на другой.

@3 Пример 1. Дана последовательность строк - ss. Получить последовательность их длин.
{{
string[] ss = { "SELECT", "FROM", "WHERE", "ORDER BY" };

var ls = ss.Select(s => s.Length);
}}

@3 Пример 2. Дана последовательность чисел. Увеличить все числа последовательности в 1000 раз.
{{
var ms = ns.Select(s => s * 1000);
}}

@3 Целевой тип данных можно сконструировать на лету. 
Он будет анонимным (что и вызвало необходимость в слове var.)

@5 Select | Реализуем запрос Select самостоятельно.
@@ {{ 
@@ IEnimerable<Tr> Select<T, Tr> (this IEnimerable<T> source, Func <T, Tr> f) 
@@ {
@@    foreach (var x in source)  
@@       yield return f(x);
@@ } 
@@ }}

@2 Запросы агрегации

@3 Агрегация сворачивает последовательность в какое-то одно значение.
Свертка требует три параметра: 
1) входная последовательность, 
2) начальное значение аккумулятора,
3) функция, которая присоединяет к аккумулятору очередной элемент последовательности.
{{
public static A Aggregate<T, A>(
    this IEnumerable<T> source, 
    A seed, 
    Func<A, T, A> func)
}}

@3 Пример. Найти произведение чисел из входной последовательности.
{{
int res = ns.Aggregate(1, (a, x) => a * x);
}}

@3 Перегрузки:
{{
T Aggregate<T>
A Aggregate<T, A>
R Aggregate<T, A, R>
}}

@3 Частные случаи агрегации: Sum, Average, Max, Min.

@3 Запросы Count(), Count(pred) - тоже агрегация.

@2 Задачи

@6 Сколько Книг   | 362
@6 Старшие Читатели  | 363
@6 Самые Молодые  | 364
@@ @6 Средние Оценки Книг  | 368