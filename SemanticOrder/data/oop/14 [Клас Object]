@1 14 Клас Object

@2 Віртуальні методи класу Object
@@ Object;object|ToString|Equals|GetHashCode

@3 Усі типи .NET (і навіть структури) успадковують стандартний клас System.Object.

@3 В класі Object є три віртуальні методи, які слід перевизначати в нащадках.
{{
public virtual string ToString();
public virtual bool Equals (Object obj);
public virtual int GetHashCode();
}}

@3 Ось що відбувається, якщо цього не робити.
{{
Unit book1 = new Book { Title = "Вій", Author = "Гоголь"};
Unit book2 = new Book { Title = "Вій", Author = "Гоголь"};
Console.WriteLine(book1 == book2);
}}

@3 Метод ToString() не повинен повертати null або порожній рядок.

@2 Метод Equals
@@ -

@3 Метод Equals() класу Object вважає об'єкт еквівалентним лише собі.
Зазвичай це неприйнятно, тому віртуальний метод Equals має бути перекритим.

@3 Метод Equals() не повинен порушувати закони для еквівалентності: рефлексивність, симетричність та транзитивність.
Метод Equals() не повинен викидати виняток.

@3 Побачимо вимоги до методу Equals на прикладі класу Point.
Будемо вважати дві точки еквівалентними, якщо їх  властивості X і Y співпадають.
{{
public class Point
{
   public int X { get; set; }
   public int Y { get; set; }

   public override bool Equals(Object other)
   {
      if ((other == null) || !this.GetType().Equals(other.GetType()))
         return false;
      Point p = (Point) other;
      return (X == p.X) && (Y == p.Y);
   }
}
}}

@3 Перевірка еквівалентності починається з перевірки однотипності this та other.
{{
if ((other == null) || !this.GetType().Equals(other.GetType()))
     return false;
}} і закінчується змістовною частиною перевірки.
{{
      Point p = (Point) other;
      return (X == p.X) && (Y == p.Y);
}}

@2 Чи еквівалентна точка кольорової точці?
@@ -

@3 Визначимо клас ColoredPoint.
{{
class ColoredPoint: Point
{
    public int C {set; get;}
}
}}

Може здатися, що співпадіння типів перевіряти не обов'язково
і можна дозволити порівнювати точки з кольоровими точками.
{{
(3, 5, Red) == (3, 5)
(3, 5, Green) == (3, 5)
}}

Але якщо (3, 5, Red) == (3, 5) і (3, 5) == (3, 5, Green), то з транзитивності витікає
(3, 5, Red) == (3, 5, Green).

@2 Інші методи класу Object
@@ ReferenceEquals|GetHashCode

@3 Статичний метод Equals
{{
public static bool Equals(object objA, object objB);
}}

@3 Статичний метод ReferenceEquals
{{
public static bool ReferenceEquals(object objA, object objB);
}}

@3 Метод GetHashCode. У еквівалентних об'єктів мають бути однакові хеш-коди.
{{
public virtual int GetHashCode();
}}
[[https://habrahabr.ru/post/188038/]] - стаття про метод GetHashCode()

@3 Порядок визначення еквівалентності в класі:
1) перекриваємо метод екземпляра Equals();
2) перекриваємо метод екземпляра GetHashCode();
3) інші методи не чіпаємо.

@2 Завдання

@5 1 | Перекрити метод GetHashCode() для класу Point.
@6 Клас із методом Equals() | 220