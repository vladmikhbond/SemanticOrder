@1 01 Введение 

@2 ООП и классы 

@3 Чтобы написать большую программу, ее необходимо разделить на части - программы меньшего объема.

@3 Классы играют роль маленьких программ, у них есть данные и функции, имена которых уникальны в пределах класса.

@3 Система классов программы определяет ее структуру
(т.е. изучать нужно не ОО-программирование, а ОО-проектирование).

@3 Другая роль классов - служить типами данных. Во многих языках слова "класс" и "тип" - синонимы.

@3 Эта роль заметнее в статически типизированных языках, таких как C++, Java, C#.

@2 Платформа .NET

@3 Появилась в 2001 году как ответ компании MS на распространение Java (1995).

@3 Устройство обеих платформ сходно: 
виртуальная машина, 
большая библиотека классов, 
двухэтапная компиляция.
[[dotnet-arc.png]]

@3 Различие в языках: в Java - 1, в .NET - ∞.

@3 В настоящее время .NET считается спецификацией, 
а платформы  .NET Framework, .NET Core, Xamarin/Mono, UWP - ее реализации.
[[dotnetcore.png]]

@3 Первоначальная реализация платформы (.NET Framework) имела
- привязку к Windows, 
- закрытый исходный код. 

В .NET Core этого нет.

@2 Язык C#

@3 C# - статически типизированный язык.
Тип имеют не только значения, но и имена. 

@3 Типизация имен - это частичная спецификация программы, 
причем такая, что может быть проверена не человеком, а компилятором.
{{
let i = 0;  // JS
i = 0.5;   
---------------
int i = 0;  // C#    
i = 0.5;    // ошибка    
}}

@3 C# - объектно-ориентированный язык.

@3 Функциональный стиль программирования тоже доступен - посредством подъязыка {LINQ} - Language Integrated Query.

@3 C# разрабатывался не сообществом, а командой.
Главный разработчик С# - Андерс Хейлсберг.
[[anders_heylsberg.png]]

@2 CLI

@3 dotnet core предоставляет разработчику интерфейс командной строки.
{{
> md world
> cd world
> dotnet new console
> dotnet run
}}

@3 Состав файлов проекта:
 - world.csproj
 - Program.cs


@2 Visual Studio 

@3 Версия студии - 15.x, год - 2017.

@3 {Проект} - папка с файлами + файл проекта *.csprj.

@3 {Решение} (solution) - несколько проектов + файл решения *.sln.

@3 {Зависимости} - сторонние пакеты программ или проекты, от которых зависит проект.


@2 Файл Program.cs

@3 {{
using System;
namespace World
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Helo!");      
        }            
    }
}
}}

@3 Пространство имен - это область видимости более крупная, чем класс 

@3 Статический метод - не нуждается в объекте для своего вызова.

@3 Точка входа в программу - метод приложения, который вызывается исполняющий системой.



@2 Литература

@3 Троелсен Э., Джепикс Ф. Язык программирования C# 7 и платформы. NET и NET Core

@3 В.Бондарев. Объектно-ориентированное программирование на C#.

@3 Методичка по КП
[[https://drive.google.com/file/d/14O-5ih7wZZgj-RQgjvtCIDcefveJKHLn/view?usp=sharing]]

