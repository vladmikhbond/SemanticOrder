@1 34 Швидке сортування

@2 Часткове сортування

@3 {Алгоритм}.
Беремо перше число (опорний елемент) і розташовуємо всі числа, які менше опорного, зліва від нього.
Числа більше опорного розташовуємо праворуч від нього.

@3 Щоб застосовувати часткове сортування не тільки до масиву в цілому,
але і до будь-якого його відрізку, додаймо в параметри початок і кінець відрізка.
{{
function partSort(arr, a, b)
{
    // внутрішня функція
    let change = (i, j) => [arr[i], arr[j]] = [arr[j], arr[i]];

    let p = a;
    b--;
    while(true) {
        while (arr[a] <= arr[p]) a++;
        while (arr[b] >  arr[p]) b--;
        if (a < b)
            change(a, b);
        else
            break;
    }
    change(b, p);
    return b;
}
}}

@3 Часова складність часткового сортування - O(n).

@2 Сортування Хоара

@3 [[hoar.png]]
Чарльз Ентоні Річард Хоар

@3 {Алгоритм}.
1. Виконуємо часткове сортування і запам'ятовуємо нову позицію опорного елемента.
2. Швидко сортуємо ліву частину масиву.
3. Швидко сортуємо праву частину масиву.
Порожній масив або масив з одного елемента, вважаємо відсортованим.

@3 {Програма}.
{{
function qs (arr, a, b) {
    if (b - a < 2) return;
    let m = partSort(arr, a, b);
    qs (arr, a, m);
    qs (arr, m + 1, b);
}
}}

@2 Часова складність сортування Хоара

@3 Розмір частин при переході на наступний рівень рекурсії зменшується приблизно вдвічі.
Тому глибина рекурсії швидкого сортування  ~ log n.

@3 На кожному рівні рекурсії загальний обсяг операцій не перевищує кількості елементів у вихідному масиві - n,
значить, оцінка часової складності швидкого сортування O(n * log n).


@@ @2 Нижня оцінка сортування порівняннями

@@ @3 Припустимо, треба впорядкувати послідовність з n різних елементів (a1, a2, ..., aN).

@@ @3 Дерево рішень при сортуванні складається з вузлів з двома дочірніми піддеревами.
@@ Висота дерева h - кількість порівнянь, виконаних в процесі сортування.

@@ @3 Листя дерева відповідають всіляким перестановок вихідної послідовності, всього їх - N!
@@ Двійкове дерево висоти h має не більше ніж 2 ^ h листя.

@@ @3 Значить, маємо нерівність n! <= L <= 2 ^ h, де l - число листя.
@@ Прологаріфміровав його, отримаємо:
@@ h> = log n! = Log 1 + log 2 + ... + log n> n / 2 * log (n / 2) = n / 2 * (log n - 1).

@@ h = Ω (n log n)


@2 Окремі випадки сортування

@3 Впорядкувати по зростанню масив біт.

@3 Впорядкувати по зростанню масив з англійських букв.

@3 Сортування чисел за розрядами.

@2 Підсумки

@3 Існує алгоритм сортування, який настільки ж швидше квадратичного,
наскільки двійковий пошук швидше послідовного.

@3 Доведено, що для загального випадку сортування не існує алгоритму зі складністю менше, ніж O(n * log n).

@3 Це не скасовує того, що при наявності обмежень на значення сортування можна виконувати швидше.


@2 Завдання


@6 Часткове Сортування | 661
@6 Швидке Сортування | 565