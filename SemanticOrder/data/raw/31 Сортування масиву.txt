@1 31 Сортування масиву

@2 Задача сортування

@3 Відсортувати масив означає так переставити його елементи,
щоб вони розташувалися в порядку збільшення або зменшення.

@2 Сортування вибором (алгоритм)

@3 Засноване на тому, що в масиві завжди є вже впорядкована частина.
Вона розташовується зліва і спочатку порожня.
{{
[| 30, 40, 20, 10, 50, 80, 60]
}}

@3 Алгоритм займається тільки невпорядкованою частиною.
На кожному кроці він:
a) знаходить в ній найменший елемент,
b) міняє його місцями з першим елементом.

@3 В результаті такого обміну межа між частинами зсувається вправо на один елемент.
Після першого кроку
{{
 [10, | 40, 20, 30, 50, 80, 60]
}}

@3 Після n-1 кроку (n - розмір масиву) відсортована частина пошириться на весь масив.

@2 Сортування вибором (програма)

@3 Діємо згідно з алгоритмом.
m - початковий індекс невпорядкованої частини.
{{
function selectSort(arr) {
    for (let m = 0; m < arr.length; m++) {
        let i = findMinIndex(arr, m); // найменший елемент впорядкованої частини
        changeElements(arr, i, m);    // обмін 
    }
}
}}


@3 Програмуємо відсутні частини алгоритму.
{{
// Знаходить позицію мінімального елемента, починаючи з i-го.
function findMinIndex(arr, i) {
    ...
    return m;
}

// arr [i] <=> arr [j]
function changeElements (arr, i, j) {
    ...
}

xs = [4,2,3,1]
selectSort(xs)
console.log(xs);
}}

@3 JS допускає вкладені визначення функцій.
Згідно з законами видимості із внутрішньої функції видно параметри і локальні змінні зовнішньої функції.


@2 Сортування вставками

@3 Як і в попередньому алгоритмі, ліворуч знаходиться впорядкована,
а праворуч - невпорядкована частина масиву.
На кожному кроці алгоритму береться перший елемент з невпорядкованою частини
і вставляється у впорядковану частину так, щоб порядок не порушився.
Кроків потрібно стільки, скільки елементів в масиві.

@3 [[Insertion-sort-example-300px.png]]


@2 Сортування бульбашкою

@3 [[Bubble-sort-example-300px.png]]

@2 Підсумки

@3 Сортування вибором засноване на виборі мінімального елемента в невпорядкованій частини

@3 Сортування вставками засноване на вставці чергового елемента у впорядковану частину.

@3 Сортування бульбашкою засноване на обміні місцями пар елементів, які порушують бажаний порядок.

@3 Всі три сортування еквівалентні за витратами часу і не відносяться до швидких сортувань.

@2 Задачі

@6 Сортування бульбашкою | 581
