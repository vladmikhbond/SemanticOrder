@1 24 Ще про функції

@2 Контекст this

@3 Ключове слово this посилається на глобальний об'єкт,
але це може бути змінено.
{{
console.log (this);

(function f () {console.log (this)})()
}}

@3 Контексту this можна надати інше значення, лише коли функцію викликають за допомогою метода call. 
{{
f.call ( "hello!", 1,2)
}}

@2 Функціональні вирази

@3 Функцію можна визначити у вигляді функціонального виразу.
{{
const sum = function (x, y) { 
    return x + y; 
}
}}

@3 Функціональному виразу можна надати ім'я.
{{
const sum = function (x, y) ...
}} або скористатися безіменним виразом, як аргументом якоїсь функції.


@3 Такий спосіб завдання відрізняється від звичайного визначення функції командою function
тим, що повинен передувати виклику функції в програмі.

@2 Стрілочні функції

@3 Функціональний вираз - це безіменна функція.
Стрілочні функції - це більш лаконічний запис безіменної функції.
{{
x => x + 1
(a, b) => a + b
}}

@3 Стрілочна функція відрізняється від функціонального виразу тим, що не має власного контексту this.
Завдяки цьому, в ній доступний контекст зовнішньої функції.

@2 Замикання

@3 Приклад. Визначити функцію next(), яка при кожному виклику повертає номер свого виклику,
тобто, чергове число з послідовності: 1, 2, 3, ...

@3 Наївне рішення.
{{
let n = 1;

function next() {
    return n++;
}
}} Рішення вразливе через доступність зовнішньої змінної n.

@3 Попереднє рішення
{{
function factory() {
    let n = 1;

    function next() {
        return n++;
    }

    return next;
}

const next = factory();
}}

@3 Функція factory повертає функцію разом з тим, що її оточує.

@3 Лексичним замиканням називається функціональний об'єкт, разом зі своїм оточенням.

@3 Остаточне рішення
{{
function factory() {
    let n = 1;
    return () => n++;
}
}}


@2 Задачі

@6 Підрахунок Викликів | 941

@6 Черговий Фібоначчі | 1179

@6 Підйом Функції в Масив | 940

@6 Часткове Застосування | 942

@6 Часткове Застосування 2 | 943
