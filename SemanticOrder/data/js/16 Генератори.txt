@1 16 Генератори
@@ генератор+|function*;function *|yield

@3 Генератор - це функція з спеціальним синтаксисом, що створює і повертає об'єкт, що ітерується, тобто. послідовність.
Особливості синтаксису:
1) після слова function стоїть зірочка,
2) у тілі зустрічається слово yield з наступним виразом.

@3 Наприклад,
{{
function* generate123() {
    yield 1;
    yield 2;
    yield 3;
}

for (let n of generate123())
    console.log(n);
}}

@3 Цикл for-of та інші клієнти генератора покажуть лише ті значення, для котрих done == false.

@3 Приклад більш змістовного генератору range  дає функція з циклом.
{{
function* range(start, end) {
  for (let i = start; i <= end; i++) {
    yield i;
  }
}

// Оператор spread перетворює ітератор на масив
let arr = [...range(2,5)];
console.log(arr);
}}

@3 {Примітка} Генератор повертає об'єкт, який володіє двома методами, [Symbol.iteretor] і next,
тобто водночас є і ітератором.
{{
function* generate123() {
    yield 1;
    yield 2;
    yield 3;
}

let gen = generate123();

// gen – це ітератор, оскільки має метод next()
console.log(gen.next());

// gen - це послідовність, оскільки має властивість Symbol.iterator
let iter = gen[Symbol.iterator]();
}}


@2 Композиція генераторів
@@ yield*;yield *

@3 За допомогою композиції yield* створимо генератор кодів усіх алфавітно-цифрових символів.
{{
function* alphaNum() {
  // 0..9
  yield * range (48, 57);
  // A..Z
  yield* range(65, 90);
  // a..z
  yield * range (97, 122);
}

console.log([...alphaNum()]);
}}


@2 Виклик next() з аргументом
@@ -

@3 Якщо метод викликає next() з аргументом, генератор не тільки поверне чергове значення,
але й отримає аргумент у вигляді значення операції yield
(виконаємо у налагодженні, поставивши контрольну точку у кожному рядку).
{{
function* gen() {
   let result = yield 1;
   console.log("gen:", result)
   result = yield 2;
   console.log("gen:", result)
   result = yield 3;
   console.log("gen:", result)
}

let it = gen(), o = null;

o = it.next("111");
console.log("main:", o.value);
o = it.next("222");
console.log("main:", o.value)
o = it.next("333");
console.log("main:", o.value)
}}

@3 Перший виклик next неспроможний передати значення генератору, т.к. ще не виконано жодної команди yield.

@3 Розглянутий код дає поняття про співпрограми. (Зробити малюнок)

@3 Приклад - прийом із підтвердженням.
Генератор виробляє цифри від 1 до 10.
Клієнт отримує число і підтверджує його отримання.
Якщо підтвердження немає, генератор виробляє те число повторно.
{{
function* gen() {
    for (var i = 1; i < 10; i++) {
        let accepted = yield i;
        if (! accepted) {
            i--;
        }
    }
}

let it = gen();
let v = it.next().value;
while (!v.done) {
    let b = confirm(v + "accepted?")
    v = it.next(b).value
}
}}

@2 Передача помилки в генератор
@@ передач+ помилки

@3 Щоб передати yield не значення, а помилку, використовується виклик generator.throw(err).
При цьому в команді yield виникає виключення.
{{
function* gen() {
  try {
    let result = yield "Скільки буде 2 + 2?"; // Тут з'явиться виняток
  } catch(e) {
   console.log(e);
  }
}

let generator = gen();
let question = generator.next().value;
generator.throw(new Error("відповідь не знайдено"));
}}

@3 Це виключення можна зловити в генераторі, як це зроблено вище.
Або в коді клієнта, як це зроблено нижче.
{{
function* gen() {
  let result = yield "Скільки буде 2 + 2?"; // Тут з'явиться виняток
}

let generator = gen();
let question = generator.next().value;
try {
  generator.throw(new Error("відповідь не знайдено"));
} catch(e) {
  console.log(e);
}
}}

@2 Задачі

@6 Псевдовипадковий Генератор | 1168
@6 Псевдовипадковий Генератор M | 1169