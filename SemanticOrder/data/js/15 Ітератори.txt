@1 15 Ітератори

@2 Ітератори
@@ iтератор+|послідовніст+|next()|що ітерується

@3 Ітератор - це об'єкт, що забезпечує послідовне проходження елементів деякої множини.
Для цього ітератор має метод next().

@3 Об'єкт, що ітерується - об'єкт, який володіє методом, що повертає ітератор.
Ім'я цього методу зарезервовано – Symbol.iterator.
Як синонім сполучення "об'єкт, що ітерується" будемо вживати слово "послідовність."

@3 Послідовностями є масиви та рядки.
Ось як можна отримати ітератор масиву і з ним переглянути всі елементи масиву.
{{
let it = [10, 20, 30][Symbol.iterator]();
console.log(it.next()); // надрукує { value: 10, done: false }
}}

@3 Метод next() повертає черговий елемент послідовності, загорнутий в об'єкт з двома полями.
{{
{ value: значення, done: false }
}}
Коли елементи вичерпаються, метод next() поверне таке
{{
{ value: undefined, done: true }.
}}

@3 Пройти всі елементи послідовності можна у звичайному циклі for.
{{
let arr = [10,20,30]

for (let it = arr[Symbol.iterator](), x = it.next(); !x.done; x = it.next() )
   console.log(x.value);
}}

@3 Але спеціально для проходження послідовностей існує цикл for-of.
{{
for (let x of arr)
  console.log(x);
}}

@2+Саморобний ітератор

@3 Оголосимо об'єкт range з властивостями from і to, межами відрізка цілих чисел від from до to включно.
{{
let range = { from: 1, to: 5};
}}

@3 Зробимо об'єкт range послідовністю.
Для цього додамо йому метод [Symbol.iterator].
Метод повинен повернути об'єкт, який володіє методом next().
{{
range[Symbol.iterator] = function () {
    let current = this.from;
    let last = this.to;
    // повертає об'єкт із методом next()
    return {
        next() {
            if (current <= last)
                return { value: current++, done: false };
            return {done: true};
        }
    }
};
// 
let it = range[Symbol.iterator]();
console.log(it.next());
}}

@3 До послідовностей застосовують не тільки цикл for-of,
{{
for (let x of range)
   console.log(x); // 1 2 3 4 5 в стовпчик
}}

@3 ... але і оператор spread,
{{
console.log(...range) // 1 2 3 4 5
}}

@3 ... і деструктуризацію.
{{
[a, b, c] = range;
console.log(a, b, c); // 1 2 3
}}

@2 Завдання

@6 Зворотній Ітератор для Масиву | 951
@6 Ітератор Сусідних Осередків | 952
