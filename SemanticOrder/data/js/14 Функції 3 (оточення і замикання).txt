@1 14 Функції 3 (оточення і замикання)

@2 Ключове слово this
@@ this

@3 У тілі функції доступне ключове слово this, яке може позначати що завгодно.
Що саме воно позначатиме, вирішується в момент виклику функції.

@3 Якщо функція викликається звичайним чином, this не визначено або (у стандарті ES-3) посилається на глобальний об'єкт.

@3 Якщо функція викликається як метод об'єкта, this посилається на цей об'єкт.

@3 Якщо функція викликається як конструктор об'єкта, this означає об'єкт, що конструюється.

@3 Якщо функція викликається як обробник події, this посилається на об'єкт-джерело події.

@3 Посиланню this можна надати значення за допомогою методів функціонального об'єкта apply або call.


@2 Стрілочні функції
@@ cтрілочн+ функц+|=>

@3 Стрілочні функції це інший спосіб визначення анонімних функцій.
{{
let inc = x => x + 1;

let sum = (a, b) => a + b;

let getCurrentTime = () => {
  let date = New Date();
  let hours = date.getHours();
  let minutes = date.getMinutes();
  return hours + ':' + minutes;
};
}}

@3 На відміну від декларацій і функціональних виразів стрілочна функція не має власного контексту this.
Це слушно в обробниках подій та інших функціях зворотного виклику.

@2 Глобальний об'єкт
@@ глобальн+ об'єкт+|двоетапн+ інтерпретац+|GO|FD|FE

@3 Інтерпретація програми відбувається у два етапи.
На першому етапі створюється глобальний об'єкт (GO).
Властивістю глобального об'єкта стають глобальні змінні та функціональні визначення (FD).
На другому етапі відбувається виконання основного потоку команд.

@3 Завдяки двоетапній інтерпретації, послатися на функцію можна до оголошення.
{{
f();
function f() {
    console.log("Hi!")
}
}}

@3 Функції, задані за допомогою функціональних виразів (FE), не створюються на першому етапі
і стають властивостями глобального об'єкта тільки на другому етапі.
{{
f(); // _помилка_
let f = function() {
  console.log("Hi!")
}
}}

@2 Лексичне оточення
@@ лексичн+ оточенн+|LexicalEnvironment|[[ Scope ]] 

@3 Команда виклику функції також виконується у два етапи:
1) створюється об'єкт LexicalEnvironment, властивостями якого є аргументи, вкладені FD та локальні змінні.
2) виконується тіло функції.

@3 Об'єкт LexicalEnvironment (LE) є аналогом глобального об'єкта (GO),
але на відміну глобального об'єкта, на нього немає явного посилання.

@3 LE функції має приховане посилання [[ Scope ]] на LE зовнішньої функції або GO, якщо зовнішньої функції немає.
Через посилання [[ Scope ]] функції доступні зовнішні змінні та функції.

@3 {Примітка}. Під час створення функції конструктором new Function(),
її властивість [[Scope]] посилається не на поточний LexicalEnvironment, а на глобальний об'єкт.

@3 Як наслідок, функція, створена конструктором, не може посилатися на локальні змінні зовнішніх функцій.
Це виключає похибки, спричинені перейменуванням локальних змінних стискачами JS-коду.

@2 Замикання
@@ замиканн+|closure

@3 Після виконання функції LE зазвичай викидається і пам'ять очищається, але не завжди.

@3 Може статися так, що зовнішньої функції вже немає в пам'яті, а внутрішня ще є завдяки живому посиланню на неї.
У цьому випадку LE зовнішньої функції також залишається в пам'яті (lexical closure)
{{
function outer() {
  let t = 10
  return inner;

  function inner() {
      alert(t)
  }
}

let foo = outer()
// Функція outer вивантажена, але її об'єкт LE залишився
foo()
}}

@2 Задачі

@5 1 | Функція змінної x задана у вигляді рядка, наприклад "x * Math.sin(x)"
Підрахуйте інтеграл цієї функції на відрізку (0, 1)


@6 Підрахунок Дзвінків | 941
@6 Додавання Підрахунку Дзвінків | 940
@6 Часткове застосування | 942
@6 Часткове застосування 2 | 943
@6 Генератор Фібоначчі | 944
