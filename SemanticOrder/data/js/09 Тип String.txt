@1 09 Тип String

@2 Тип String
@@ екрануюч+ символ+|\n|\r

@3 Екрануючий символ "\:" змінює значення символу, що йде за ним, на альтернативне.

@3 Для більшості символів основне та альтернативне значення збігаються, але для деяких – ні
\b Backspace
\f Form feed
\n New line
\r Carriage return
\t Tab

@3 Внутрішнім форматом рядків є Юнікод, тому будь-який символ можна зобразити так {{ '\u00FF' }}

@2 Методи рядків
@@ charAt|fromCharCode|toLowerCase

@3 s.charAt(i) - те саме, що s[i]
Різниця в тому, що якщо символу немає – charAt видає порожній рядок, а дужки – undefined.

@3 Зміна регістру - методи toLowerCase() та toUpperCase().

@3 Пошук підрядка - метод indexOf(підрядок, початкова_позиція_пошуку]).
Повертає -1, якщо підрядок не знайдено.
{{
let str = "Widget";

if (str.indexOf("get") != -1) {
  alert( 'входження є!');
}
}}
{Примітка}. Оскільки ~-1 = 0, умову можна записати коротше
{{
if (~str.indexOf("get") ) . . .
}}

@3 Виділити підрядок: substring, substr, slice
{{
slice(start [, end]) (негативні значення відраховуються від кінця рядка):
}}

@3 Переходи Код <-> Символ
String.fromCharCode(code)
str.charCodeAt(pos)
{{
let str = '';
for (let i = 1034; i <= 1113; i++) {
  str += String.fromCharCode(i);
}
console.log(str);
}}
Надрукує:
ЊЋНЍУВПАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЩЫЫЭЭЯяобвгдежзийклмнопрстуфхцчшщыыээяяѐђѓеѕиијљ


@2 Порівняння рядків
@@ ' > '|" > "

@3 Рядки порівнюються посимвольно, символи порівнюються за своїм кодом.
Тому 'а' > 'Я' 

@3 Метод str1.localeCompare(str2) повертає:
-1, якщо str1 < str2,
1, якщо str1 > str2,
0 якщо вони рівні.
Він порівнює рядки строго за абеткою, тому незалежно від регістру,
{{
'Ю'.localeCompare('Я')
-1
}}

@2 Рядки-шаблони
@@ ${

@3 У зворотні лапки укладають рядки-шаблони - багаторядкові константи із символами шаблонів усередині.
{{
let apples = 2;
let oranges = 3;

alert(`${apples} + ${oranges} = ${apples + oranges}`);    // 2 + 3 = 5
}}

@2 Функції шаблонізації
@@ функці+ шаблонізац+

@3 Користувацька функція шаблонізації визначає правило перетворення рядка-шаблону на звичайний рядок.
Першим параметром функції є масив заповнювачів, решта параметрів - те, що виводиться
(заповнювачі - те, що за межами шаблонів).
{{
function myTemplate (stubs, x, y) {
  return stubs[0] + x + stubs[1] + y + stubs[2];
}
}}

@3 Ім'я функції шаблонізації потрібно вказувати перед рядком-шаблоном.
{{
console.log(myTemplate`aaaa${222}bbbb${333}cccc`)
}}

@3 Перший параметр stubs має додаткову властивість row, яка містить рядки-заповнювачі в оригінальному вигляді.
Тобто, якщо в рядку-заповнювачі знаходиться \n або \u1234 або інше особливе поєднання символів, у row воно таким і залишиться.


@2 Задачі

@6 Анаграма | 508
@6 Чорно-Червоний | 771
@6 Входження Підрядку в Рядок | 505
@6 День Народження | 401
@6 Рима | 507