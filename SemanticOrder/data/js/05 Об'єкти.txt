@1 05 Об'єкти
@@ об'єкт+|словник|конструктор+|властивість;властивост+

@3 Об'єкт - це сукупність пар (ключ : значення).
Порожній об'єкт (без властивостей) можна створити викликом конструктора або за допомогою літералу.
{{
let o1 = new Object();
let o2 = {};
}}

@3 Конструктором у програмуванні зветься фунеція, яка створює значення складених типів.

@3 {Примітка}. В основному потоці коду порожня пара дужок сприймається як блок, а в складі виразу як об'єкт.

@3 Синонімом слова "об'єкт" є "словник".
Імена властивостей називають також ключами.

@2 Властивості об'єкта
@@ квадратн+|літерал+ об'єкт+

@3 Об'єкт із властивостями можна створити за допомогою літералу.

@3 Звернутися до властивості можна і за допомогою квадратних дужок.
{{
> obj = { "prop" : 42 }
> obj["prop"]
> obj.prop
}}

@3 Ім'ям властивості може бути будь-який рядок.
Якщо ім'я властивості не є ім'ям JS або зберігається в змінній, то квадратні дужки - єдиний спосіб звернутися до властивості.
{{
> let name = "prop";
> obj[name] = 42;
> obj["нове властивість"] = 43;
}}

@3 Квадратні дужки допустимі й у літеральній нотації.
У дужках може знаходитись будь-який вираз.
Якщо значення виразу не рядок, воно буде перетворене на рядок.
{{
let o = {
    ["нова властивість"]: 43,
    [1]: 44
}
}}

@3 У літералі об'єкта достатньо вказати лише імена властивостей, якщо вже існують змінні з такими ж іменами.
{{
let name = "Василь";
let isAdmin = true;

let user = {
   name,
   isAdmin
};
}}

@3 Вже існуючому об'єкту можна додавати нові властивості.

@2 Перебирання властивостей циклом for-in
@@ for-in|перебір;перебор+

@3 Цикл for-in дозволяє перебрати всі властивості об'єкту
{{
var user = {
  name: "Василь",
  surname: "Петренко",
  age: 25,
}

for (var key in user) {
  console.log(key); // name, surname, age
}
}}

@3 Порядок перебору відповідає порядку додавання властивостей.
Але коли ключі числові, порядок перебору - зростання ключів.

@3 Перевірити, чи є об'єкта obj властивість prop можна оператором in.
{{
"prop" in obj
}}
або порівнянням
{{
obj.prop === undefined
}}

@2 Методи
@@ метод+|this

@3 Слово "метод" не є простим синонімом сполучення "функціональна властивість".
Метод має коротший синтаксис оголошення.
{{
let name = "Василь";
let user = {
   name,
   // cтарий варіант
   sayHi: function() {
     console.log(this.name);
   }

   // новий варіант
   sayHi() {
     console.log(this.name);
   }
};
}}

@3 Контекст this тут позначає об'єкт - хазяїн методу.

@2 Методи доступу (аксесори)
@@ аксесор+|get|set

@3 Читати та записувати властивість доцільно через методи.
Наприклад, є об'єкт user із властивостями
{{
let user = {
  name: "Василь",
  surname: "Петренко"
}
}}

@3 Надамо йому властивість fullName, задавши дві функції доступу в дескрипторі.
{{
Object.defineProperty(user, "fullName", {

  get: function() {
    return this.name + ' ' + this.surname;
  },

  set: function(value) {
      let split = value.split(' ');
      this.name = split[0];
      this.surname = split[1];
    }
});
}}

@3 Аксесори властивостей можна визначити і в літералі об'єкта.
{{
let user = {
  name: "Василь",
  surname: "Петренко",

  get fullName() {
    return this.name + '' + this.surname;
  },

  set fullName(value) {
    let split = value.split('');
    this.firstName = split[0];
    this.surname = split[1];
  }
};
}}

@2 Опціональний ланцюжок
@@ опціональн+ ланцюж+

@3 Опціональний ланцюжок?. - це безпечний спосіб доступу до властивостей вкладених об'єктів,
навіть якщо жодної з проміжних властивостей не існує.
{{
let user = {};    // користувач без властивості address

console.log(user.address.street);    // програма ламається
console.log(user?.address?.street);  // undefined 
}}

@3 Ланцюжок працює і з квадратними дужками, і з методами.

@2 Задачі

@6 Копія Об'єкта | 516
@6 Десять Властивостей | 515
@6 Англо-Український Словник | 568
@6 Частотний словник | 567
@6 Глибоке Копіювання Об'єкта | 939
