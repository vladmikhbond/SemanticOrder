@1 21 Конструктори і прототипи

@2 Конструктори об'єктів
@@ new

@3 Об'єкти створюють за допомогою конструктора.
{{
function User(name, age) {
   this.name = name;
   this.age = age;
}

let user = new User("Василь", 17)
}}

@3 Коли функцію викликають зі словом new, контекст this в ній посилається на об'єкт, що створюється.
Повертає конструктор створений об'єкт, тобто this.

@3 Зазвичай конструктор обходиться без return. Але якщо команда return все ж таки є, то при виклику {{return x}}
- якщо x об'єкт, буде повернуто x, а не this,
- якщо x примітивне значення, повернеться this.

@3 Конструктором стає будь-яка функція, викликана зі словом new, 
та, зазвичай, функцію спеціально готують на роль конструктора - 
в ній визначаються властивості об'єкта this, ім'я функції починають з великої літери.

@2 Прототипи
@@ прототип+|__proto__|prototype|Object.create

@3 Є властивості, які можуть поділятися багатьма подібними об'єктами, - це константи і методи.
З економії пам'яті такі властивості доцільно зібрати в окремому об'єкті - прототипі, 
а всім подібним об'єктам надати посилання на нього.

@3 Таке посилання є властивістю кожного об'єкта і зветься __proto__.
Властивості, не знайдені в самому об'єкті, будуть розшукуватись в його прототипі, в прототипі прототипу, тощо.

@3 Кожна функція в JS має властивість prototype. 
Коли функція конструює об'єкт this, вона робить таке: this.__proto__ = prototype.
{{
function Person(name) {
   this.name = name;
};

Person.prototype.f = function() {alert('I am' + this.name)};
}}

@3 Якщо об'єкт створюється літералом, його прототипом стає порожній об'єкт.

@3 {Примітка}. Створити об'єкт із прототипом можна і без конструктора – методом Object.create (прототип).
{{
p2 = Object.create(Person.prototype)
p2.name = "John"
}}

@2 Метод constructor
@@ constructor|Object.getPrototypeOf|Object.create

@3 Конструктор вказує на прототип своєю властивістю prototye,
а прототип посилається на конструктор функціональною властивістю constructor.
{Примітка}. У будь-якого об'єкта є метод constructor.

@3 Ви можете скористатися методом constructor, щоб дізнатися, яка функція сконструювала об'єкт.
{{
c.__proto__.constructor
// або просто
c.constructor
}}
{Примітка}. Цими ж міркуваннями керується й оператор  instanceof.

@3 Метод Object.getPrototypeOf(obj) – повертає прототип об'єкта obj.

@3 Можна створити об'єкт без прототипу
{{
var data = Object.create(null);
}}
Всі властивості такого об'єкта вимушено будуть власними.

@2 Доповнення вбудованих типів
@@ Array.prototype

@3 Завдяки прототипам, можна наділити вбудовані типи новою поведінкою.

@3 Додамо всім масивам метод last().
{{
let a = [1,2,3]

if (!Array.prototype.last) {
    Array.prototype.last = function(){
        return this[this.length - 1];
    };
};

console.log(a.last())
}}

@2 Завдання

@6 Окружність | 603
@6 Прямокутник | 604
@6 Форматування | 605
@6 Дублікат Властивостей | 947


